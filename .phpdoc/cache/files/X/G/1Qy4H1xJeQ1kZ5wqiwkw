1723816399
waR3U4bTeM%3Ab01e91018129ac9a9ebd261515a6bd41-573b6a4edcdd3255aaa548439f125795
s:137276:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxMjp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjU3M2I2YTRlZGNkZDMyNTVhYWE1NDg0MzlmMTI1Nzk1IjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6Njg6IjZhMjdmMmQ4OWM0MTNmMWZiZjFhMDMwNjBjYTVkOGI4ZmNiNmQ1YTJjODc4MWI5MzBiMzNhODc1NzAzN2I2OWYucGhwIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHBhdGgiO3M6OTA6InZhci9jYWNoZS9kZXYvdHdpZy82YS82YTI3ZjJkODljNDEzZjFmYmYxYTAzMDYwY2E1ZDhiOGZjYjZkNWEyYzg3ODFiOTMwYjMzYTg3NTcwMzdiNjlmLnBocCI7czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBzb3VyY2UiO3M6NzY5MzY6Ijw/cGhwCgp1c2UgVHdpZ1xFbnZpcm9ubWVudDsKdXNlIFR3aWdcRXJyb3JcTG9hZGVyRXJyb3I7CnVzZSBUd2lnXEVycm9yXFJ1bnRpbWVFcnJvcjsKdXNlIFR3aWdcRXh0ZW5zaW9uXFNhbmRib3hFeHRlbnNpb247CnVzZSBUd2lnXE1hcmt1cDsKdXNlIFR3aWdcU2FuZGJveFxTZWN1cml0eUVycm9yOwp1c2UgVHdpZ1xTYW5kYm94XFNlY3VyaXR5Tm90QWxsb3dlZFRhZ0Vycm9yOwp1c2UgVHdpZ1xTYW5kYm94XFNlY3VyaXR5Tm90QWxsb3dlZEZpbHRlckVycm9yOwp1c2UgVHdpZ1xTYW5kYm94XFNlY3VyaXR5Tm90QWxsb3dlZEZ1bmN0aW9uRXJyb3I7CnVzZSBUd2lnXFNvdXJjZTsKdXNlIFR3aWdcVGVtcGxhdGU7CgovKiBTZWN1cml0eUJ1bmRsZTpDb2xsZWN0b3I6c2VjdXJpdHkuaHRtbC50d2lnICovCmNsYXNzIF9fVHdpZ1RlbXBsYXRlXzRhYjA5YmVlNzA0ZTQ2NzlmZGRjZjEzMDNhMWI5MjFmZWVmZDQwZmExOWFhNjEzMmM3MTIxYjBkYTNmZjk5N2QgZXh0ZW5kcyBcVHdpZ1xUZW1wbGF0ZQp7CiAgICBwcml2YXRlICRzb3VyY2U7CiAgICBwcml2YXRlICRtYWNyb3MgPSBbXTsKCiAgICBwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoRW52aXJvbm1lbnQgJGVudikKICAgIHsKICAgICAgICBwYXJlbnQ6Ol9fY29uc3RydWN0KCRlbnYpOwoKICAgICAgICAkdGhpcy0+c291cmNlID0gJHRoaXMtPmdldFNvdXJjZUNvbnRleHQoKTsKCiAgICAgICAgJHRoaXMtPmJsb2NrcyA9IFsKICAgICAgICAgICAgJ3BhZ2VfdGl0bGUnID0+IFskdGhpcywgJ2Jsb2NrX3BhZ2VfdGl0bGUnXSwKICAgICAgICAgICAgJ3Rvb2xiYXInID0+IFskdGhpcywgJ2Jsb2NrX3Rvb2xiYXInXSwKICAgICAgICAgICAgJ21lbnUnID0+IFskdGhpcywgJ2Jsb2NrX21lbnUnXSwKICAgICAgICAgICAgJ3BhbmVsJyA9PiBbJHRoaXMsICdibG9ja19wYW5lbCddLAogICAgICAgIF07CiAgICB9CgogICAgcHJvdGVjdGVkIGZ1bmN0aW9uIGRvR2V0UGFyZW50KGFycmF5ICRjb250ZXh0KQogICAgewogICAgICAgIC8vIGxpbmUgMQogICAgICAgIHJldHVybiAiQFdlYlByb2ZpbGVyL1Byb2ZpbGVyL2xheW91dC5odG1sLnR3aWciOwogICAgfQoKICAgIHByb3RlY3RlZCBmdW5jdGlvbiBkb0Rpc3BsYXkoYXJyYXkgJGNvbnRleHQsIGFycmF5ICRibG9ja3MgPSBbXSkKICAgIHsKICAgICAgICAkbWFjcm9zID0gJHRoaXMtPm1hY3JvczsKICAgICAgICAkX19pbnRlcm5hbF8wODViMDE0MjgwNjIwMjU5OWM3ZmUzYjMyOTE2NGE5MjM5N2Q4OTc4MjA3YTM3ZTc5ZDcwYjhjNTI1OTllMzNlID0gJHRoaXMtPmV4dGVuc2lvbnNbIlN5bWZvbnlcXEJ1bmRsZVxcV2ViUHJvZmlsZXJCdW5kbGVcXFR3aWdcXFdlYlByb2ZpbGVyRXh0ZW5zaW9uIl07CiAgICAgICAgJF9faW50ZXJuYWxfMDg1YjAxNDI4MDYyMDI1OTljN2ZlM2IzMjkxNjRhOTIzOTdkODk3ODIwN2EzN2U3OWQ3MGI4YzUyNTk5ZTMzZS0+ZW50ZXIoJF9faW50ZXJuYWxfMDg1YjAxNDI4MDYyMDI1OTljN2ZlM2IzMjkxNjRhOTIzOTdkODk3ODIwN2EzN2U3OWQ3MGI4YzUyNTk5ZTMzZV9wcm9mID0gbmV3IFxUd2lnXFByb2ZpbGVyXFByb2ZpbGUoJHRoaXMtPmdldFRlbXBsYXRlTmFtZSgpLCAidGVtcGxhdGUiLCAiU2VjdXJpdHlCdW5kbGU6Q29sbGVjdG9yOnNlY3VyaXR5Lmh0bWwudHdpZyIpKTsKCiAgICAgICAgJF9faW50ZXJuYWxfMzE5MzkzNDYxMzA5ODkyOTI0ZmY2ZTc0ZDZkNmU2NDI4N2RmNjRiNjM1NDViOTk0ZTEwMGQ0YWIyMjNhZWQwMiA9ICR0aGlzLT5leHRlbnNpb25zWyJTeW1mb255XFxCcmlkZ2VcXFR3aWdcXEV4dGVuc2lvblxcUHJvZmlsZXJFeHRlbnNpb24iXTsKICAgICAgICAkX19pbnRlcm5hbF8zMTkzOTM0NjEzMDk4OTI5MjRmZjZlNzRkNmQ2ZTY0Mjg3ZGY2NGI2MzU0NWI5OTRlMTAwZDRhYjIyM2FlZDAyLT5lbnRlcigkX19pbnRlcm5hbF8zMTkzOTM0NjEzMDk4OTI5MjRmZjZlNzRkNmQ2ZTY0Mjg3ZGY2NGI2MzU0NWI5OTRlMTAwZDRhYjIyM2FlZDAyX3Byb2YgPSBuZXcgXFR3aWdcUHJvZmlsZXJcUHJvZmlsZSgkdGhpcy0+Z2V0VGVtcGxhdGVOYW1lKCksICJ0ZW1wbGF0ZSIsICJTZWN1cml0eUJ1bmRsZTpDb2xsZWN0b3I6c2VjdXJpdHkuaHRtbC50d2lnIikpOwoKICAgICAgICAkdGhpcy0+cGFyZW50ID0gJHRoaXMtPmxvYWRUZW1wbGF0ZSgiQFdlYlByb2ZpbGVyL1Byb2ZpbGVyL2xheW91dC5odG1sLnR3aWciLCAiU2VjdXJpdHlCdW5kbGU6Q29sbGVjdG9yOnNlY3VyaXR5Lmh0bWwudHdpZyIsIDEpOwogICAgICAgICR0aGlzLT5wYXJlbnQtPmRpc3BsYXkoJGNvbnRleHQsIGFycmF5X21lcmdlKCR0aGlzLT5ibG9ja3MsICRibG9ja3MpKTsKICAgICAgICAKICAgICAgICAkX19pbnRlcm5hbF8wODViMDE0MjgwNjIwMjU5OWM3ZmUzYjMyOTE2NGE5MjM5N2Q4OTc4MjA3YTM3ZTc5ZDcwYjhjNTI1OTllMzNlLT5sZWF2ZSgkX19pbnRlcm5hbF8wODViMDE0MjgwNjIwMjU5OWM3ZmUzYjMyOTE2NGE5MjM5N2Q4OTc4MjA3YTM3ZTc5ZDcwYjhjNTI1OTllMzNlX3Byb2YpOwoKICAgICAgICAKICAgICAgICAkX19pbnRlcm5hbF8zMTkzOTM0NjEzMDk4OTI5MjRmZjZlNzRkNmQ2ZTY0Mjg3ZGY2NGI2MzU0NWI5OTRlMTAwZDRhYjIyM2FlZDAyLT5sZWF2ZSgkX19pbnRlcm5hbF8zMTkzOTM0NjEzMDk4OTI5MjRmZjZlNzRkNmQ2ZTY0Mjg3ZGY2NGI2MzU0NWI5OTRlMTAwZDRhYjIyM2FlZDAyX3Byb2YpOwoKICAgIH0KCiAgICAvLyBsaW5lIDMKICAgIHB1YmxpYyBmdW5jdGlvbiBibG9ja19wYWdlX3RpdGxlKCRjb250ZXh0LCBhcnJheSAkYmxvY2tzID0gW10pCiAgICB7CiAgICAgICAgJG1hY3JvcyA9ICR0aGlzLT5tYWNyb3M7CiAgICAgICAgJF9faW50ZXJuYWxfMDg1YjAxNDI4MDYyMDI1OTljN2ZlM2IzMjkxNjRhOTIzOTdkODk3ODIwN2EzN2U3OWQ3MGI4YzUyNTk5ZTMzZSA9ICR0aGlzLT5leHRlbnNpb25zWyJTeW1mb255XFxCdW5kbGVcXFdlYlByb2ZpbGVyQnVuZGxlXFxUd2lnXFxXZWJQcm9maWxlckV4dGVuc2lvbiJdOwogICAgICAgICRfX2ludGVybmFsXzA4NWIwMTQyODA2MjAyNTk5YzdmZTNiMzI5MTY0YTkyMzk3ZDg5NzgyMDdhMzdlNzlkNzBiOGM1MjU5OWUzM2UtPmVudGVyKCRfX2ludGVybmFsXzA4NWIwMTQyODA2MjAyNTk5YzdmZTNiMzI5MTY0YTkyMzk3ZDg5NzgyMDdhMzdlNzlkNzBiOGM1MjU5OWUzM2VfcHJvZiA9IG5ldyBcVHdpZ1xQcm9maWxlclxQcm9maWxlKCR0aGlzLT5nZXRUZW1wbGF0ZU5hbWUoKSwgImJsb2NrIiwgInBhZ2VfdGl0bGUiKSk7CgogICAgICAgICRfX2ludGVybmFsXzMxOTM5MzQ2MTMwOTg5MjkyNGZmNmU3NGQ2ZDZlNjQyODdkZjY0YjYzNTQ1Yjk5NGUxMDBkNGFiMjIzYWVkMDIgPSAkdGhpcy0+ZXh0ZW5zaW9uc1siU3ltZm9ueVxcQnJpZGdlXFxUd2lnXFxFeHRlbnNpb25cXFByb2ZpbGVyRXh0ZW5zaW9uIl07CiAgICAgICAgJF9faW50ZXJuYWxfMzE5MzkzNDYxMzA5ODkyOTI0ZmY2ZTc0ZDZkNmU2NDI4N2RmNjRiNjM1NDViOTk0ZTEwMGQ0YWIyMjNhZWQwMi0+ZW50ZXIoJF9faW50ZXJuYWxfMzE5MzkzNDYxMzA5ODkyOTI0ZmY2ZTc0ZDZkNmU2NDI4N2RmNjRiNjM1NDViOTk0ZTEwMGQ0YWIyMjNhZWQwMl9wcm9mID0gbmV3IFxUd2lnXFByb2ZpbGVyXFByb2ZpbGUoJHRoaXMtPmdldFRlbXBsYXRlTmFtZSgpLCAiYmxvY2siLCAicGFnZV90aXRsZSIpKTsKCiAgICAgICAgZWNobyAiU2VjdXJpdHkiOwogICAgICAgIAogICAgICAgICRfX2ludGVybmFsXzMxOTM5MzQ2MTMwOTg5MjkyNGZmNmU3NGQ2ZDZlNjQyODdkZjY0YjYzNTQ1Yjk5NGUxMDBkNGFiMjIzYWVkMDItPmxlYXZlKCRfX2ludGVybmFsXzMxOTM5MzQ2MTMwOTg5MjkyNGZmNmU3NGQ2ZDZlNjQyODdkZjY0YjYzNTQ1Yjk5NGUxMDBkNGFiMjIzYWVkMDJfcHJvZik7CgogICAgICAgIAogICAgICAgICRfX2ludGVybmFsXzA4NWIwMTQyODA2MjAyNTk5YzdmZTNiMzI5MTY0YTkyMzk3ZDg5NzgyMDdhMzdlNzlkNzBiOGM1MjU5OWUzM2UtPmxlYXZlKCRfX2ludGVybmFsXzA4NWIwMTQyODA2MjAyNTk5YzdmZTNiMzI5MTY0YTkyMzk3ZDg5NzgyMDdhMzdlNzlkNzBiOGM1MjU5OWUzM2VfcHJvZik7CgogICAgfQoKICAgIC8vIGxpbmUgNQogICAgcHVibGljIGZ1bmN0aW9uIGJsb2NrX3Rvb2xiYXIoJGNvbnRleHQsIGFycmF5ICRibG9ja3MgPSBbXSkKICAgIHsKICAgICAgICAkbWFjcm9zID0gJHRoaXMtPm1hY3JvczsKICAgICAgICAkX19pbnRlcm5hbF8wODViMDE0MjgwNjIwMjU5OWM3ZmUzYjMyOTE2NGE5MjM5N2Q4OTc4MjA3YTM3ZTc5ZDcwYjhjNTI1OTllMzNlID0gJHRoaXMtPmV4dGVuc2lvbnNbIlN5bWZvbnlcXEJ1bmRsZVxcV2ViUHJvZmlsZXJCdW5kbGVcXFR3aWdcXFdlYlByb2ZpbGVyRXh0ZW5zaW9uIl07CiAgICAgICAgJF9faW50ZXJuYWxfMDg1YjAxNDI4MDYyMDI1OTljN2ZlM2IzMjkxNjRhOTIzOTdkODk3ODIwN2EzN2U3OWQ3MGI4YzUyNTk5ZTMzZS0+ZW50ZXIoJF9faW50ZXJuYWxfMDg1YjAxNDI4MDYyMDI1OTljN2ZlM2IzMjkxNjRhOTIzOTdkODk3ODIwN2EzN2U3OWQ3MGI4YzUyNTk5ZTMzZV9wcm9mID0gbmV3IFxUd2lnXFByb2ZpbGVyXFByb2ZpbGUoJHRoaXMtPmdldFRlbXBsYXRlTmFtZSgpLCAiYmxvY2siLCAidG9vbGJhciIpKTsKCiAgICAgICAgJF9faW50ZXJuYWxfMzE5MzkzNDYxMzA5ODkyOTI0ZmY2ZTc0ZDZkNmU2NDI4N2RmNjRiNjM1NDViOTk0ZTEwMGQ0YWIyMjNhZWQwMiA9ICR0aGlzLT5leHRlbnNpb25zWyJTeW1mb255XFxCcmlkZ2VcXFR3aWdcXEV4dGVuc2lvblxcUHJvZmlsZXJFeHRlbnNpb24iXTsKICAgICAgICAkX19pbnRlcm5hbF8zMTkzOTM0NjEzMDk4OTI5MjRmZjZlNzRkNmQ2ZTY0Mjg3ZGY2NGI2MzU0NWI5OTRlMTAwZDRhYjIyM2FlZDAyLT5lbnRlcigkX19pbnRlcm5hbF8zMTkzOTM0NjEzMDk4OTI5MjRmZjZlNzRkNmQ2ZTY0Mjg3ZGY2NGI2MzU0NWI5OTRlMTAwZDRhYjIyM2FlZDAyX3Byb2YgPSBuZXcgXFR3aWdcUHJvZmlsZXJcUHJvZmlsZSgkdGhpcy0+Z2V0VGVtcGxhdGVOYW1lKCksICJibG9jayIsICJ0b29sYmFyIikpOwoKICAgICAgICAvLyBsaW5lIDYKICAgICAgICBlY2hvICIgICAgIjsKICAgICAgICBpZiAodHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDYsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgInRva2VuIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCA2KSkgewogICAgICAgICAgICAvLyBsaW5lIDcKICAgICAgICAgICAgZWNobyAiICAgICAgICAiOwogICAgICAgICAgICAkY29udGV4dFsiaXNfYXV0aGVudGljYXRlZCJdID0gKHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCA3LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJlbmFibGVkIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCA3KSAmJiB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgNywgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiYXV0aGVudGljYXRlZCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgNykpOwogICAgICAgICAgICAvLyBsaW5lIDgKICAgICAgICAgICAgZWNobyAiICAgICAgICAiOwogICAgICAgICAgICAkY29udGV4dFsiY29sb3JfY29kZSJdID0gKCgoaXNzZXQoJGNvbnRleHRbImlzX2F1dGhlbnRpY2F0ZWQiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiaXNfYXV0aGVudGljYXRlZCIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJpc19hdXRoZW50aWNhdGVkIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiaXNfYXV0aGVudGljYXRlZCIgZG9lcyBub3QgZXhpc3QuJywgOCwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpKSA/ICgiIikgOiAoInllbGxvdyIpKTsKICAgICAgICAgICAgLy8gbGluZSA5CiAgICAgICAgICAgIGVjaG8gIiAgICAiOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIGxpbmUgMTAKICAgICAgICAgICAgZWNobyAiICAgICAgICAiOwogICAgICAgICAgICAkY29udGV4dFsiY29sb3JfY29kZSJdID0gKCh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMTAsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImVuYWJsZWQiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDEwKSkgPyAoInJlZCIpIDogKCIiKSk7CiAgICAgICAgICAgIC8vIGxpbmUgMTEKICAgICAgICAgICAgZWNobyAiICAgICI7CiAgICAgICAgfQogICAgICAgIC8vIGxpbmUgMTIKICAgICAgICBlY2hvICIKICAgICI7CiAgICAgICAgLy8gbGluZSAxMwogICAgICAgIG9iX3N0YXJ0KCk7CiAgICAgICAgLy8gbGluZSAxNAogICAgICAgIGVjaG8gIiAgICAgICAgIjsKICAgICAgICBlY2hvIHR3aWdfaW5jbHVkZSgkdGhpcy0+ZW52LCAkY29udGV4dCwgIkBTZWN1cml0eS9Db2xsZWN0b3IvaWNvbi5zdmciKTsKICAgICAgICBlY2hvICIKICAgICAgICA8c3BhbiBjbGFzcz1cInNmLXRvb2xiYXItdmFsdWVcIj4iOwogICAgICAgIC8vIGxpbmUgMTUKICAgICAgICBlY2hvIHR3aWdfZXNjYXBlX2ZpbHRlcigkdGhpcy0+ZW52LCAoKHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoJGNvbnRleHRbImNvbGxlY3RvciJdID8/IG51bGwpLCAidXNlciIsIFtdLCAiYW55IiwgdHJ1ZSwgdHJ1ZSwgZmFsc2UsIDE1KSkgPyAoX3R3aWdfZGVmYXVsdF9maWx0ZXIodHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsICgkY29udGV4dFsiY29sbGVjdG9yIl0gPz8gbnVsbCksICJ1c2VyIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAxNSksICJuL2EiKSkgOiAoIm4vYSIpKSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICBlY2hvICI8L3NwYW4+CiAgICAiOwogICAgICAgICRjb250ZXh0WyJpY29uIl0gPSAoJycgPT09ICR0bXAgPSBvYl9nZXRfY2xlYW4oKSkgPyAnJyA6IG5ldyBNYXJrdXAoJHRtcCwgJHRoaXMtPmVudi0+Z2V0Q2hhcnNldCgpKTsKICAgICAgICAvLyBsaW5lIDE3CiAgICAgICAgZWNobyAiCiAgICAiOwogICAgICAgIC8vIGxpbmUgMTgKICAgICAgICBvYl9zdGFydCgpOwogICAgICAgIC8vIGxpbmUgMTkKICAgICAgICBlY2hvICIgICAgICAgICI7CiAgICAgICAgaWYgKHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAxOSwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiaW1wZXJzb25hdGVkIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAxOSkpIHsKICAgICAgICAgICAgLy8gbGluZSAyMAogICAgICAgICAgICBlY2hvICIgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2YtdG9vbGJhci1pbmZvLWdyb3VwXCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2YtdG9vbGJhci1pbmZvLXBpZWNlXCI+CiAgICAgICAgICAgICAgICAgICAgPGI+SW1wZXJzb25hdG9yPC9iPgogICAgICAgICAgICAgICAgICAgIDxzcGFuPiI7CiAgICAgICAgICAgIC8vIGxpbmUgMjMKICAgICAgICAgICAgZWNobyB0d2lnX2VzY2FwZV9maWx0ZXIoJHRoaXMtPmVudiwgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDIzLCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJpbXBlcnNvbmF0b3JVc2VyIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyMyksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgIGVjaG8gIjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAiOwogICAgICAgIH0KICAgICAgICAvLyBsaW5lIDI3CiAgICAgICAgZWNobyAiCiAgICAgICAgPGRpdiBjbGFzcz1cInNmLXRvb2xiYXItaW5mby1ncm91cFwiPgogICAgICAgICAgICAiOwogICAgICAgIC8vIGxpbmUgMjkKICAgICAgICBpZiAodHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDI5LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJlbmFibGVkIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyOSkpIHsKICAgICAgICAgICAgLy8gbGluZSAzMAogICAgICAgICAgICBlY2hvICIgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgaWYgKHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAzMCwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAidG9rZW4iLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDMwKSkgewogICAgICAgICAgICAgICAgLy8gbGluZSAzMQogICAgICAgICAgICAgICAgZWNobyAiICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2YtdG9vbGJhci1pbmZvLXBpZWNlXCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxiPkxvZ2dlZCBpbiBhczwvYj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+IjsKICAgICAgICAgICAgICAgIC8vIGxpbmUgMzMKICAgICAgICAgICAgICAgIGVjaG8gdHdpZ19lc2NhcGVfZmlsdGVyKCR0aGlzLT5lbnYsIHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAzMywgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAidXNlciIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMzMpLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICAgICAgZWNobyAiPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2YtdG9vbGJhci1pbmZvLXBpZWNlXCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxiPkF1dGhlbnRpY2F0ZWQ8L2I+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic2YtdG9vbGJhci1zdGF0dXMgc2YtdG9vbGJhci1zdGF0dXMtIjsKICAgICAgICAgICAgICAgIC8vIGxpbmUgMzgKICAgICAgICAgICAgICAgIGVjaG8gKCgoaXNzZXQoJGNvbnRleHRbImlzX2F1dGhlbnRpY2F0ZWQiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiaXNfYXV0aGVudGljYXRlZCIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJpc19hdXRoZW50aWNhdGVkIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiaXNfYXV0aGVudGljYXRlZCIgZG9lcyBub3QgZXhpc3QuJywgMzgsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSkgPyAoImdyZWVuIikgOiAoInJlZCIpKTsKICAgICAgICAgICAgICAgIGVjaG8gIlwiPiI7CiAgICAgICAgICAgICAgICBlY2hvICgoKGlzc2V0KCRjb250ZXh0WyJpc19hdXRoZW50aWNhdGVkIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImlzX2F1dGhlbnRpY2F0ZWQiLCAkY29udGV4dCkgPyAkY29udGV4dFsiaXNfYXV0aGVudGljYXRlZCJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImlzX2F1dGhlbnRpY2F0ZWQiIGRvZXMgbm90IGV4aXN0LicsIDM4LCAkdGhpcy0+c291cmNlKTsgfSkoKSkpID8gKCJZZXMiKSA6ICgiTm8iKSk7CiAgICAgICAgICAgICAgICBlY2hvICI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzZi10b29sYmFyLWluZm8tcGllY2VcIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGI+VG9rZW4gY2xhc3M8L2I+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPiI7CiAgICAgICAgICAgICAgICAvLyBsaW5lIDQzCiAgICAgICAgICAgICAgICBlY2hvICR0aGlzLT5leHRlbnNpb25zWydTeW1mb255XEJyaWRnZVxUd2lnXEV4dGVuc2lvblxDb2RlRXh0ZW5zaW9uJ10tPmFiYnJDbGFzcyh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgNDMsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgInRva2VuQ2xhc3MiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDQzKSk7CiAgICAgICAgICAgICAgICBlY2hvICI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgLy8gbGluZSA0NgogICAgICAgICAgICAgICAgZWNobyAiICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2YtdG9vbGJhci1pbmZvLXBpZWNlXCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxiPkF1dGhlbnRpY2F0ZWQ8L2I+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic2YtdG9vbGJhci1zdGF0dXMgc2YtdG9vbGJhci1zdGF0dXMtcmVkXCI+Tm88L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIGxpbmUgNTEKICAgICAgICAgICAgZWNobyAiCiAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAvLyBsaW5lIDUyCiAgICAgICAgICAgIGlmICh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgNTIsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImZpcmV3YWxsIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCA1MikpIHsKICAgICAgICAgICAgICAgIC8vIGxpbmUgNTMKICAgICAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNmLXRvb2xiYXItaW5mby1waWVjZVwiPgogICAgICAgICAgICAgICAgICAgICAgICA8Yj5GaXJld2FsbCBuYW1lPC9iPgogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj4iOwogICAgICAgICAgICAgICAgLy8gbGluZSA1NQogICAgICAgICAgICAgICAgZWNobyB0d2lnX2VzY2FwZV9maWx0ZXIoJHRoaXMtPmVudiwgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCA1NSwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiZmlyZXdhbGwiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDU1KSwgIm5hbWUiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDU1KSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgICAgIGVjaG8gIjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8gbGluZSA1OAogICAgICAgICAgICBlY2hvICIKICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgIC8vIGxpbmUgNTkKICAgICAgICAgICAgaWYgKCh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgNTksICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgInRva2VuIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCA1OSkgJiYgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDU5LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJsb2dvdXRVcmwiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDU5KSkpIHsKICAgICAgICAgICAgICAgIC8vIGxpbmUgNjAKICAgICAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNmLXRvb2xiYXItaW5mby1waWVjZVwiPgogICAgICAgICAgICAgICAgICAgICAgICA8Yj5BY3Rpb25zPC9iPgogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCIiOwogICAgICAgICAgICAgICAgLy8gbGluZSA2MwogICAgICAgICAgICAgICAgZWNobyB0d2lnX2VzY2FwZV9maWx0ZXIoJHRoaXMtPmVudiwgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDYzLCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJsb2dvdXRVcmwiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDYzKSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgICAgIGVjaG8gIlwiPkxvZ291dDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICAvLyBsaW5lIDY0CiAgICAgICAgICAgICAgICBpZiAoKHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCA2NCwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiaW1wZXJzb25hdGVkIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCA2NCkgJiYgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDY0LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJpbXBlcnNvbmF0aW9uRXhpdFBhdGgiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDY0KSkpIHsKICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDY1CiAgICAgICAgICAgICAgICAgICAgZWNobyAiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDxhIGhyZWY9XCIiOwogICAgICAgICAgICAgICAgICAgIGVjaG8gdHdpZ19lc2NhcGVfZmlsdGVyKCR0aGlzLT5lbnYsIHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCA2NSwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiaW1wZXJzb25hdGlvbkV4aXRQYXRoIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCA2NSksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgZWNobyAiXCI+RXhpdCBpbXBlcnNvbmF0aW9uPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8vIGxpbmUgNjcKICAgICAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8gbGluZSA3MAogICAgICAgICAgICBlY2hvICIgICAgICAgICAgICAiOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIGxpbmUgNzEKICAgICAgICAgICAgZWNobyAiICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzZi10b29sYmFyLWluZm8tcGllY2VcIj4KICAgICAgICAgICAgICAgICAgICA8c3Bhbj5UaGUgc2VjdXJpdHkgaXMgZGlzYWJsZWQuPC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICI7CiAgICAgICAgfQogICAgICAgIC8vIGxpbmUgNzUKICAgICAgICBlY2hvICIgICAgICAgIDwvZGl2PgogICAgIjsKICAgICAgICAkY29udGV4dFsidGV4dCJdID0gKCcnID09PSAkdG1wID0gb2JfZ2V0X2NsZWFuKCkpID8gJycgOiBuZXcgTWFya3VwKCR0bXAsICR0aGlzLT5lbnYtPmdldENoYXJzZXQoKSk7CiAgICAgICAgLy8gbGluZSA3NwogICAgICAgIGVjaG8gIgogICAgIjsKICAgICAgICAvLyBsaW5lIDc4CiAgICAgICAgZWNobyB0d2lnX2luY2x1ZGUoJHRoaXMtPmVudiwgJGNvbnRleHQsICJAV2ViUHJvZmlsZXIvUHJvZmlsZXIvdG9vbGJhcl9pdGVtLmh0bWwudHdpZyIsIFsibGluayIgPT4gKGlzc2V0KCRjb250ZXh0WyJwcm9maWxlcl91cmwiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygicHJvZmlsZXJfdXJsIiwgJGNvbnRleHQpID8gJGNvbnRleHRbInByb2ZpbGVyX3VybCJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgInByb2ZpbGVyX3VybCIgZG9lcyBub3QgZXhpc3QuJywgNzgsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgInN0YXR1cyIgPT4gKGlzc2V0KCRjb250ZXh0WyJjb2xvcl9jb2RlIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbG9yX2NvZGUiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sb3JfY29kZSJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbG9yX2NvZGUiIGRvZXMgbm90IGV4aXN0LicsIDc4LCAkdGhpcy0+c291cmNlKTsgfSkoKSldKTsKICAgICAgICBlY2hvICIKIjsKICAgICAgICAKICAgICAgICAkX19pbnRlcm5hbF8zMTkzOTM0NjEzMDk4OTI5MjRmZjZlNzRkNmQ2ZTY0Mjg3ZGY2NGI2MzU0NWI5OTRlMTAwZDRhYjIyM2FlZDAyLT5sZWF2ZSgkX19pbnRlcm5hbF8zMTkzOTM0NjEzMDk4OTI5MjRmZjZlNzRkNmQ2ZTY0Mjg3ZGY2NGI2MzU0NWI5OTRlMTAwZDRhYjIyM2FlZDAyX3Byb2YpOwoKICAgICAgICAKICAgICAgICAkX19pbnRlcm5hbF8wODViMDE0MjgwNjIwMjU5OWM3ZmUzYjMyOTE2NGE5MjM5N2Q4OTc4MjA3YTM3ZTc5ZDcwYjhjNTI1OTllMzNlLT5sZWF2ZSgkX19pbnRlcm5hbF8wODViMDE0MjgwNjIwMjU5OWM3ZmUzYjMyOTE2NGE5MjM5N2Q4OTc4MjA3YTM3ZTc5ZDcwYjhjNTI1OTllMzNlX3Byb2YpOwoKICAgIH0KCiAgICAvLyBsaW5lIDgxCiAgICBwdWJsaWMgZnVuY3Rpb24gYmxvY2tfbWVudSgkY29udGV4dCwgYXJyYXkgJGJsb2NrcyA9IFtdKQogICAgewogICAgICAgICRtYWNyb3MgPSAkdGhpcy0+bWFjcm9zOwogICAgICAgICRfX2ludGVybmFsXzA4NWIwMTQyODA2MjAyNTk5YzdmZTNiMzI5MTY0YTkyMzk3ZDg5NzgyMDdhMzdlNzlkNzBiOGM1MjU5OWUzM2UgPSAkdGhpcy0+ZXh0ZW5zaW9uc1siU3ltZm9ueVxcQnVuZGxlXFxXZWJQcm9maWxlckJ1bmRsZVxcVHdpZ1xcV2ViUHJvZmlsZXJFeHRlbnNpb24iXTsKICAgICAgICAkX19pbnRlcm5hbF8wODViMDE0MjgwNjIwMjU5OWM3ZmUzYjMyOTE2NGE5MjM5N2Q4OTc4MjA3YTM3ZTc5ZDcwYjhjNTI1OTllMzNlLT5lbnRlcigkX19pbnRlcm5hbF8wODViMDE0MjgwNjIwMjU5OWM3ZmUzYjMyOTE2NGE5MjM5N2Q4OTc4MjA3YTM3ZTc5ZDcwYjhjNTI1OTllMzNlX3Byb2YgPSBuZXcgXFR3aWdcUHJvZmlsZXJcUHJvZmlsZSgkdGhpcy0+Z2V0VGVtcGxhdGVOYW1lKCksICJibG9jayIsICJtZW51IikpOwoKICAgICAgICAkX19pbnRlcm5hbF8zMTkzOTM0NjEzMDk4OTI5MjRmZjZlNzRkNmQ2ZTY0Mjg3ZGY2NGI2MzU0NWI5OTRlMTAwZDRhYjIyM2FlZDAyID0gJHRoaXMtPmV4dGVuc2lvbnNbIlN5bWZvbnlcXEJyaWRnZVxcVHdpZ1xcRXh0ZW5zaW9uXFxQcm9maWxlckV4dGVuc2lvbiJdOwogICAgICAgICRfX2ludGVybmFsXzMxOTM5MzQ2MTMwOTg5MjkyNGZmNmU3NGQ2ZDZlNjQyODdkZjY0YjYzNTQ1Yjk5NGUxMDBkNGFiMjIzYWVkMDItPmVudGVyKCRfX2ludGVybmFsXzMxOTM5MzQ2MTMwOTg5MjkyNGZmNmU3NGQ2ZDZlNjQyODdkZjY0YjYzNTQ1Yjk5NGUxMDBkNGFiMjIzYWVkMDJfcHJvZiA9IG5ldyBcVHdpZ1xQcm9maWxlclxQcm9maWxlKCR0aGlzLT5nZXRUZW1wbGF0ZU5hbWUoKSwgImJsb2NrIiwgIm1lbnUiKSk7CgogICAgICAgIC8vIGxpbmUgODIKICAgICAgICBlY2hvICIgICAgPHNwYW4gY2xhc3M9XCJsYWJlbCAiOwogICAgICAgIGVjaG8gKCgoICF0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgODIsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImVuYWJsZWQiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDgyKSB8fCAgIXR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCA4MiwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAidG9rZW4iLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDgyKSkpID8gKCJkaXNhYmxlZCIpIDogKCIiKSk7CiAgICAgICAgZWNobyAiXCI+CiAgICAgICAgPHNwYW4gY2xhc3M9XCJpY29uXCI+IjsKICAgICAgICAvLyBsaW5lIDgzCiAgICAgICAgZWNobyB0d2lnX2luY2x1ZGUoJHRoaXMtPmVudiwgJGNvbnRleHQsICJAU2VjdXJpdHkvQ29sbGVjdG9yL2ljb24uc3ZnIik7CiAgICAgICAgZWNobyAiPC9zcGFuPgogICAgICAgIDxzdHJvbmc+U2VjdXJpdHk8L3N0cm9uZz4KICAgIDwvc3Bhbj4KIjsKICAgICAgICAKICAgICAgICAkX19pbnRlcm5hbF8zMTkzOTM0NjEzMDk4OTI5MjRmZjZlNzRkNmQ2ZTY0Mjg3ZGY2NGI2MzU0NWI5OTRlMTAwZDRhYjIyM2FlZDAyLT5sZWF2ZSgkX19pbnRlcm5hbF8zMTkzOTM0NjEzMDk4OTI5MjRmZjZlNzRkNmQ2ZTY0Mjg3ZGY2NGI2MzU0NWI5OTRlMTAwZDRhYjIyM2FlZDAyX3Byb2YpOwoKICAgICAgICAKICAgICAgICAkX19pbnRlcm5hbF8wODViMDE0MjgwNjIwMjU5OWM3ZmUzYjMyOTE2NGE5MjM5N2Q4OTc4MjA3YTM3ZTc5ZDcwYjhjNTI1OTllMzNlLT5sZWF2ZSgkX19pbnRlcm5hbF8wODViMDE0MjgwNjIwMjU5OWM3ZmUzYjMyOTE2NGE5MjM5N2Q4OTc4MjA3YTM3ZTc5ZDcwYjhjNTI1OTllMzNlX3Byb2YpOwoKICAgIH0KCiAgICAvLyBsaW5lIDg4CiAgICBwdWJsaWMgZnVuY3Rpb24gYmxvY2tfcGFuZWwoJGNvbnRleHQsIGFycmF5ICRibG9ja3MgPSBbXSkKICAgIHsKICAgICAgICAkbWFjcm9zID0gJHRoaXMtPm1hY3JvczsKICAgICAgICAkX19pbnRlcm5hbF8wODViMDE0MjgwNjIwMjU5OWM3ZmUzYjMyOTE2NGE5MjM5N2Q4OTc4MjA3YTM3ZTc5ZDcwYjhjNTI1OTllMzNlID0gJHRoaXMtPmV4dGVuc2lvbnNbIlN5bWZvbnlcXEJ1bmRsZVxcV2ViUHJvZmlsZXJCdW5kbGVcXFR3aWdcXFdlYlByb2ZpbGVyRXh0ZW5zaW9uIl07CiAgICAgICAgJF9faW50ZXJuYWxfMDg1YjAxNDI4MDYyMDI1OTljN2ZlM2IzMjkxNjRhOTIzOTdkODk3ODIwN2EzN2U3OWQ3MGI4YzUyNTk5ZTMzZS0+ZW50ZXIoJF9faW50ZXJuYWxfMDg1YjAxNDI4MDYyMDI1OTljN2ZlM2IzMjkxNjRhOTIzOTdkODk3ODIwN2EzN2U3OWQ3MGI4YzUyNTk5ZTMzZV9wcm9mID0gbmV3IFxUd2lnXFByb2ZpbGVyXFByb2ZpbGUoJHRoaXMtPmdldFRlbXBsYXRlTmFtZSgpLCAiYmxvY2siLCAicGFuZWwiKSk7CgogICAgICAgICRfX2ludGVybmFsXzMxOTM5MzQ2MTMwOTg5MjkyNGZmNmU3NGQ2ZDZlNjQyODdkZjY0YjYzNTQ1Yjk5NGUxMDBkNGFiMjIzYWVkMDIgPSAkdGhpcy0+ZXh0ZW5zaW9uc1siU3ltZm9ueVxcQnJpZGdlXFxUd2lnXFxFeHRlbnNpb25cXFByb2ZpbGVyRXh0ZW5zaW9uIl07CiAgICAgICAgJF9faW50ZXJuYWxfMzE5MzkzNDYxMzA5ODkyOTI0ZmY2ZTc0ZDZkNmU2NDI4N2RmNjRiNjM1NDViOTk0ZTEwMGQ0YWIyMjNhZWQwMi0+ZW50ZXIoJF9faW50ZXJuYWxfMzE5MzkzNDYxMzA5ODkyOTI0ZmY2ZTc0ZDZkNmU2NDI4N2RmNjRiNjM1NDViOTk0ZTEwMGQ0YWIyMjNhZWQwMl9wcm9mID0gbmV3IFxUd2lnXFByb2ZpbGVyXFByb2ZpbGUoJHRoaXMtPmdldFRlbXBsYXRlTmFtZSgpLCAiYmxvY2siLCAicGFuZWwiKSk7CgogICAgICAgIC8vIGxpbmUgODkKICAgICAgICBlY2hvICIgICAgPGgyPlNlY3VyaXR5IFRva2VuPC9oMj4KCiAgICAiOwogICAgICAgIC8vIGxpbmUgOTEKICAgICAgICBpZiAodHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDkxLCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJlbmFibGVkIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCA5MSkpIHsKICAgICAgICAgICAgLy8gbGluZSA5MgogICAgICAgICAgICBlY2hvICIgICAgICAgICI7CiAgICAgICAgICAgIGlmICh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgOTIsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgInRva2VuIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCA5MikpIHsKICAgICAgICAgICAgICAgIC8vIGxpbmUgOTMKICAgICAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtZXRyaWNzXCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWV0cmljXCI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ2YWx1ZVwiPiI7CiAgICAgICAgICAgICAgICAvLyBsaW5lIDk1CiAgICAgICAgICAgICAgICAoKCh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgOTUsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgInVzZXIiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDk1KSA9PSAiYW5vbi4iKSkgPyAocHJpbnQgKCJBbm9ueW1vdXMiKSkgOiAocHJpbnQgKHR3aWdfZXNjYXBlX2ZpbHRlcigkdGhpcy0+ZW52LCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgOTUsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgInVzZXIiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDk1KSwgImh0bWwiLCBudWxsLCB0cnVlKSkpKTsKICAgICAgICAgICAgICAgIGVjaG8gIjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImxhYmVsXCI+VXNlcm5hbWU8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWV0cmljXCI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ2YWx1ZVwiPiI7CiAgICAgICAgICAgICAgICAvLyBsaW5lIDEwMAogICAgICAgICAgICAgICAgZWNobyB0d2lnX2luY2x1ZGUoJHRoaXMtPmVudiwgJGNvbnRleHQsICgoIkBXZWJQcm9maWxlci9JY29uLyIgLiAoKHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAxMDAsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImF1dGhlbnRpY2F0ZWQiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDEwMCkpID8gKCJ5ZXMiKSA6ICgibm8iKSkpIC4gIi5zdmciKSk7CiAgICAgICAgICAgICAgICBlY2hvICI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJsYWJlbFwiPkF1dGhlbnRpY2F0ZWQ8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8dGFibGU+CiAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICA8dGggc2NvcGU9XCJjb2xcIiBjbGFzcz1cImtleVwiPlByb3BlcnR5PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRoIHNjb3BlPVwiY29sXCI+VmFsdWU8L3RoPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICA8L3RoZWFkPgogICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlJvbGVzPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgICAgIC8vIGxpbmUgMTE2CiAgICAgICAgICAgICAgICBlY2hvICgodHdpZ190ZXN0X2VtcHR5KHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAxMTYsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgInJvbGVzIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAxMTYpKSkgPyAoIm5vbmUiKSA6ICgkdGhpcy0+ZW52LT5nZXRGdW5jdGlvbigncHJvZmlsZXJfZHVtcCcpLT5nZXRDYWxsYWJsZSgpKCR0aGlzLT5lbnYsIHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAxMTYsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgInJvbGVzIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAxMTYpLCAxKSkpOwogICAgICAgICAgICAgICAgZWNobyAiCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgICAgIC8vIGxpbmUgMTE4CiAgICAgICAgICAgICAgICBpZiAoKCAhdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDExOCwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiYXV0aGVudGljYXRlZCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMTE4KSAmJiB0d2lnX3Rlc3RfZW1wdHkodHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDExOCwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAicm9sZXMiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDExOCkpKSkgewogICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMTE5CiAgICAgICAgICAgICAgICAgICAgZWNobyAiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cImhlbHBcIj5Vc2VyIGlzIG5vdCBhdXRoZW50aWNhdGVkIHByb2JhYmx5IGJlY2F1c2UgdGhleSBoYXZlIG5vIHJvbGVzLjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvLyBsaW5lIDEyMQogICAgICAgICAgICAgICAgZWNobyAiICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgLy8gbGluZSAxMjQKICAgICAgICAgICAgICAgIGlmICh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMTI0LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJzdXBwb3J0c1JvbGVIaWVyYXJjaHkiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDEyNCkpIHsKICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDEyNQogICAgICAgICAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICA8dGg+SW5oZXJpdGVkIFJvbGVzPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkPiI7CiAgICAgICAgICAgICAgICAgICAgLy8gbGluZSAxMjcKICAgICAgICAgICAgICAgICAgICBlY2hvICgodHdpZ190ZXN0X2VtcHR5KHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAxMjcsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImluaGVyaXRlZFJvbGVzIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAxMjcpKSkgPyAoIm5vbmUiKSA6ICgkdGhpcy0+ZW52LT5nZXRGdW5jdGlvbigncHJvZmlsZXJfZHVtcCcpLT5nZXRDYWxsYWJsZSgpKCR0aGlzLT5lbnYsIHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAxMjcsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImluaGVyaXRlZFJvbGVzIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAxMjcpLCAxKSkpOwogICAgICAgICAgICAgICAgICAgIGVjaG8gIjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy8gbGluZSAxMzAKICAgICAgICAgICAgICAgIGVjaG8gIgogICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICAvLyBsaW5lIDEzMQogICAgICAgICAgICAgICAgaWYgKHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAxMzEsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgInRva2VuIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAxMzEpKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gbGluZSAxMzIKICAgICAgICAgICAgICAgICAgICBlY2hvICIgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlRva2VuPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkPiI7CiAgICAgICAgICAgICAgICAgICAgLy8gbGluZSAxMzQKICAgICAgICAgICAgICAgICAgICBlY2hvICR0aGlzLT5lbnYtPmdldEZ1bmN0aW9uKCdwcm9maWxlcl9kdW1wJyktPmdldENhbGxhYmxlKCkoJHRoaXMtPmVudiwgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDEzNCwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAidG9rZW4iLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDEzNCkpOwogICAgICAgICAgICAgICAgICAgIGVjaG8gIjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy8gbGluZSAxMzcKICAgICAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICI7CiAgICAgICAgICAgIH0gZWxzZWlmICh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgICAgICAgICAgICAgLy8gbGluZSAxMzkKKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMTM5LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJlbmFibGVkIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAxMzkpKSB7CiAgICAgICAgICAgICAgICAvLyBsaW5lIDE0MAogICAgICAgICAgICAgICAgZWNobyAiICAgICAgICAgICAgPGRpdiBjbGFzcz1cImVtcHR5XCI+CiAgICAgICAgICAgICAgICA8cD5UaGVyZSBpcyBubyBzZWN1cml0eSB0b2tlbi48L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8gbGluZSAxNDQKICAgICAgICAgICAgZWNobyAiCgogICAgICAgIDxoMj5TZWN1cml0eSBGaXJld2FsbDwvaDI+CgogICAgICAgICI7CiAgICAgICAgICAgIC8vIGxpbmUgMTQ4CiAgICAgICAgICAgIGlmICh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMTQ4LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJmaXJld2FsbCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMTQ4KSkgewogICAgICAgICAgICAgICAgLy8gbGluZSAxNDkKICAgICAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtZXRyaWNzXCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWV0cmljXCI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ2YWx1ZVwiPiI7CiAgICAgICAgICAgICAgICAvLyBsaW5lIDE1MQogICAgICAgICAgICAgICAgZWNobyB0d2lnX2VzY2FwZV9maWx0ZXIoJHRoaXMtPmVudiwgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAxNTEsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImZpcmV3YWxsIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAxNTEpLCAibmFtZSIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMTUxKSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgICAgIGVjaG8gIjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImxhYmVsXCI+TmFtZTwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1ldHJpY1wiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidmFsdWVcIj4iOwogICAgICAgICAgICAgICAgLy8gbGluZSAxNTUKICAgICAgICAgICAgICAgIGVjaG8gdHdpZ19pbmNsdWRlKCR0aGlzLT5lbnYsICRjb250ZXh0LCAoKCJAV2ViUHJvZmlsZXIvSWNvbi8iIC4gKCh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDE1NSwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiZmlyZXdhbGwiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDE1NSksICJzZWN1cml0eV9lbmFibGVkIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAxNTUpKSA/ICgieWVzIikgOiAoIm5vIikpKSAuICIuc3ZnIikpOwogICAgICAgICAgICAgICAgZWNobyAiPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibGFiZWxcIj5TZWN1cml0eSBlbmFibGVkPC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWV0cmljXCI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ2YWx1ZVwiPiI7CiAgICAgICAgICAgICAgICAvLyBsaW5lIDE1OQogICAgICAgICAgICAgICAgZWNobyB0d2lnX2luY2x1ZGUoJHRoaXMtPmVudiwgJGNvbnRleHQsICgoIkBXZWJQcm9maWxlci9JY29uLyIgLiAoKHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMTU5LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJmaXJld2FsbCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMTU5KSwgInN0YXRlbGVzcyIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMTU5KSkgPyAoInllcyIpIDogKCJubyIpKSkgLiAiLnN2ZyIpKTsKICAgICAgICAgICAgICAgIGVjaG8gIjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImxhYmVsXCI+U3RhdGVsZXNzPC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWV0cmljXCI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ2YWx1ZVwiPiI7CiAgICAgICAgICAgICAgICAvLyBsaW5lIDE2MwogICAgICAgICAgICAgICAgZWNobyB0d2lnX2luY2x1ZGUoJHRoaXMtPmVudiwgJGNvbnRleHQsICgoIkBXZWJQcm9maWxlci9JY29uLyIgLiAoKHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMTYzLCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJmaXJld2FsbCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMTYzKSwgImFsbG93c19hbm9ueW1vdXMiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDE2MykpID8gKCJ5ZXMiKSA6ICgibm8iKSkpIC4gIi5zdmciKSk7CiAgICAgICAgICAgICAgICBlY2hvICI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJsYWJlbFwiPkFsbG93cyBhbm9ueW1vdXM8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgLy8gbGluZSAxNjgKICAgICAgICAgICAgICAgIGlmICh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDE2OCwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiZmlyZXdhbGwiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDE2OCksICJzZWN1cml0eV9lbmFibGVkIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAxNjgpKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gbGluZSAxNjkKICAgICAgICAgICAgICAgICAgICBlY2hvICIgICAgICAgICAgICAgICAgPGg0PkNvbmZpZ3VyYXRpb248L2g0PgoKICAgICAgICAgICAgICAgIDx0YWJsZT4KICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBzY29wZT1cImNvbFwiIGNsYXNzPVwia2V5XCI+S2V5PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBzY29wZT1cImNvbFwiPlZhbHVlPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPgogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPnByb3ZpZGVyPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4iOwogICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMTgxCiAgICAgICAgICAgICAgICAgICAgKCh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDE4MSwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiZmlyZXdhbGwiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDE4MSksICJwcm92aWRlciIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMTgxKSkgPyAocHJpbnQgKHR3aWdfZXNjYXBlX2ZpbHRlcigkdGhpcy0+ZW52LCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDE4MSwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiZmlyZXdhbGwiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDE4MSksICJwcm92aWRlciIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMTgxKSwgImh0bWwiLCBudWxsLCB0cnVlKSkpIDogKHByaW50ICgiKG5vbmUpIikpKTsKICAgICAgICAgICAgICAgICAgICBlY2hvICI8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+Y29udGV4dDwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+IjsKICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDE4NQogICAgICAgICAgICAgICAgICAgICgodHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAxODUsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImZpcmV3YWxsIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAxODUpLCAiY29udGV4dCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMTg1KSkgPyAocHJpbnQgKHR3aWdfZXNjYXBlX2ZpbHRlcigkdGhpcy0+ZW52LCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDE4NSwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiZmlyZXdhbGwiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDE4NSksICJjb250ZXh0IiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAxODUpLCAiaHRtbCIsIG51bGwsIHRydWUpKSkgOiAocHJpbnQgKCIobm9uZSkiKSkpOwogICAgICAgICAgICAgICAgICAgIGVjaG8gIjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5lbnRyeV9wb2ludDwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+IjsKICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDE4OQogICAgICAgICAgICAgICAgICAgICgodHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAxODksICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImZpcmV3YWxsIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAxODkpLCAiZW50cnlfcG9pbnQiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDE4OSkpID8gKHByaW50ICh0d2lnX2VzY2FwZV9maWx0ZXIoJHRoaXMtPmVudiwgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAxODksICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImZpcmV3YWxsIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAxODkpLCAiZW50cnlfcG9pbnQiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDE4OSksICJodG1sIiwgbnVsbCwgdHJ1ZSkpKSA6IChwcmludCAoIihub25lKSIpKSk7CiAgICAgICAgICAgICAgICAgICAgZWNobyAiPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPnVzZXJfY2hlY2tlcjwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+IjsKICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDE5MwogICAgICAgICAgICAgICAgICAgICgodHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAxOTMsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImZpcmV3YWxsIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAxOTMpLCAidXNlcl9jaGVja2VyIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAxOTMpKSA/IChwcmludCAodHdpZ19lc2NhcGVfZmlsdGVyKCR0aGlzLT5lbnYsIHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMTkzLCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJmaXJld2FsbCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMTkzKSwgInVzZXJfY2hlY2tlciIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMTkzKSwgImh0bWwiLCBudWxsLCB0cnVlKSkpIDogKHByaW50ICgiKG5vbmUpIikpKTsKICAgICAgICAgICAgICAgICAgICBlY2hvICI8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+YWNjZXNzX2RlbmllZF9oYW5kbGVyPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4iOwogICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMTk3CiAgICAgICAgICAgICAgICAgICAgKCh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDE5NywgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiZmlyZXdhbGwiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDE5NyksICJhY2Nlc3NfZGVuaWVkX2hhbmRsZXIiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDE5NykpID8gKHByaW50ICh0d2lnX2VzY2FwZV9maWx0ZXIoJHRoaXMtPmVudiwgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAxOTcsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImZpcmV3YWxsIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAxOTcpLCAiYWNjZXNzX2RlbmllZF9oYW5kbGVyIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAxOTcpLCAiaHRtbCIsIG51bGwsIHRydWUpKSkgOiAocHJpbnQgKCIobm9uZSkiKSkpOwogICAgICAgICAgICAgICAgICAgIGVjaG8gIjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5hY2Nlc3NfZGVuaWVkX3VybDwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+IjsKICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDIwMQogICAgICAgICAgICAgICAgICAgICgodHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAyMDEsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImZpcmV3YWxsIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyMDEpLCAiYWNjZXNzX2RlbmllZF91cmwiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDIwMSkpID8gKHByaW50ICh0d2lnX2VzY2FwZV9maWx0ZXIoJHRoaXMtPmVudiwgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAyMDEsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImZpcmV3YWxsIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyMDEpLCAiYWNjZXNzX2RlbmllZF91cmwiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDIwMSksICJodG1sIiwgbnVsbCwgdHJ1ZSkpKSA6IChwcmludCAoIihub25lKSIpKSk7CiAgICAgICAgICAgICAgICAgICAgZWNobyAiPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPmxpc3RlbmVyczwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+IjsKICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDIwNQogICAgICAgICAgICAgICAgICAgIGVjaG8gKCh0d2lnX3Rlc3RfZW1wdHkodHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAyMDUsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImZpcmV3YWxsIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyMDUpLCAibGlzdGVuZXJzIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyMDUpKSkgPyAoIihub25lKSIpIDogKCR0aGlzLT5lbnYtPmdldEZ1bmN0aW9uKCdwcm9maWxlcl9kdW1wJyktPmdldENhbGxhYmxlKCkoJHRoaXMtPmVudiwgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAyMDUsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImZpcmV3YWxsIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyMDUpLCAibGlzdGVuZXJzIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyMDUpLCAxKSkpOwogICAgICAgICAgICAgICAgICAgIGVjaG8gIjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4KICAgICAgICAgICAgICAgIDwvdGFibGU+CgogICAgICAgICAgICAgICAgPGg0Pkxpc3RlbmVyczwvaDQ+CgogICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDIxMgogICAgICAgICAgICAgICAgICAgIGlmICh0d2lnX3Rlc3RfZW1wdHkoKCh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKCRjb250ZXh0WyJjb2xsZWN0b3IiXSA/PyBudWxsKSwgImxpc3RlbmVycyIsIFtdLCAiYW55IiwgdHJ1ZSwgdHJ1ZSwgZmFsc2UsIDIxMikpID8gKF90d2lnX2RlZmF1bHRfZmlsdGVyKHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoJGNvbnRleHRbImNvbGxlY3RvciJdID8/IG51bGwpLCAibGlzdGVuZXJzIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyMTIpLCBbXSkpIDogKFtdKSkpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMjEzCiAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImVtcHR5XCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwPk5vIHNlY3VyaXR5IGxpc3RlbmVycyBoYXZlIGJlZW4gcmVjb3JkZWQuIENoZWNrIHRoYXQgZGVidWdnaW5nIGlzIGVuYWJsZWQgaW4gdGhlIGtlcm5lbC48L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMjE3CiAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICAgICAgICAgPHRhYmxlPgogICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5MaXN0ZW5lcjwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+RHVyYXRpb248L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlJlc3BvbnNlPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4KCiAgICAgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMjI2CiAgICAgICAgICAgICAgICAgICAgICAgICRjb250ZXh0WyJwcmV2aW91c19ldmVudCJdID0gdHdpZ19maXJzdCgkdGhpcy0+ZW52LCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMjI2LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJsaXN0ZW5lcnMiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDIyNikpOwogICAgICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDIyNwogICAgICAgICAgICAgICAgICAgICAgICBlY2hvICIgICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgICAgICAgICAkY29udGV4dFsnX3BhcmVudCddID0gJGNvbnRleHQ7CiAgICAgICAgICAgICAgICAgICAgICAgICRjb250ZXh0Wydfc2VxJ10gPSB0d2lnX2Vuc3VyZV90cmF2ZXJzYWJsZSh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMjI3LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJsaXN0ZW5lcnMiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDIyNykpOwogICAgICAgICAgICAgICAgICAgICAgICAkY29udGV4dFsnbG9vcCddID0gWwogICAgICAgICAgICAgICAgICAgICAgICAgICdwYXJlbnQnID0+ICRjb250ZXh0WydfcGFyZW50J10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2luZGV4MCcgPT4gMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAnaW5kZXgnICA9PiAxLAogICAgICAgICAgICAgICAgICAgICAgICAgICdmaXJzdCcgID0+IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICAgIF07CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc19hcnJheSgkY29udGV4dFsnX3NlcSddKSB8fCAoaXNfb2JqZWN0KCRjb250ZXh0Wydfc2VxJ10pICYmICRjb250ZXh0Wydfc2VxJ10gaW5zdGFuY2VvZiBcQ291bnRhYmxlKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGxlbmd0aCA9IGNvdW50KCRjb250ZXh0Wydfc2VxJ10pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvbnRleHRbJ2xvb3AnXVsncmV2aW5kZXgwJ10gPSAkbGVuZ3RoIC0gMTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb250ZXh0Wydsb29wJ11bJ3JldmluZGV4J10gPSAkbGVuZ3RoOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvbnRleHRbJ2xvb3AnXVsnbGVuZ3RoJ10gPSAkbGVuZ3RoOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvbnRleHRbJ2xvb3AnXVsnbGFzdCddID0gMSA9PT0gJGxlbmd0aDsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBmb3JlYWNoICgkY29udGV4dFsnX3NlcSddIGFzICRjb250ZXh0WyJfa2V5Il0gPT4gJGNvbnRleHRbImxpc3RlbmVyIl0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMjI4CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICIgICAgICAgICAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgodHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsICRjb250ZXh0WyJsb29wIl0sICJmaXJzdCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjI4KSB8fCAoJGNvbnRleHRbImxpc3RlbmVyIl0gIT0gKGlzc2V0KCRjb250ZXh0WyJwcmV2aW91c19ldmVudCJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJwcmV2aW91c19ldmVudCIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJwcmV2aW91c19ldmVudCJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgInByZXZpb3VzX2V2ZW50IiBkb2VzIG5vdCBleGlzdC4nLCAyMjgsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSkpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGluZSAyMjkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAhdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsICRjb250ZXh0WyJsb29wIl0sICJmaXJzdCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjI5KSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDIzMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMjMyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGluZSAyMzQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29udGV4dFsicHJldmlvdXNfZXZlbnQiXSA9ICRjb250ZXh0WyJsaXN0ZW5lciJdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMjM1CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAiICAgICAgICAgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDIzNgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwiZm9udC1ub3JtYWxcIj4iOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGluZSAyMzgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gJHRoaXMtPmVudi0+Z2V0RnVuY3Rpb24oJ3Byb2ZpbGVyX2R1bXAnKS0+Z2V0Q2FsbGFibGUoKSgkdGhpcy0+ZW52LCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgJGNvbnRleHRbImxpc3RlbmVyIl0sICJzdHViIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyMzgpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gIjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwibm8td3JhcFwiPiI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDIzOQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWNobyB0d2lnX2VzY2FwZV9maWx0ZXIoJHRoaXMtPmVudiwgdHdpZ19zcHJpbnRmKCIlMC4yZiIsICh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgJGNvbnRleHRbImxpc3RlbmVyIl0sICJ0aW1lIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyMzkpICogMTAwMCkpLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAiIG1zPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XCJmb250LW5vcm1hbFwiPiI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDI0MAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAoKHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAkY29udGV4dFsibGlzdGVuZXIiXSwgInJlc3BvbnNlIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyNDApKSA/ICgkdGhpcy0+ZW52LT5nZXRGdW5jdGlvbigncHJvZmlsZXJfZHVtcCcpLT5nZXRDYWxsYWJsZSgpKCR0aGlzLT5lbnYsIHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAkY29udGV4dFsibGlzdGVuZXIiXSwgInJlc3BvbnNlIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyNDApKSkgOiAoIihub25lKSIpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gIjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDI0MwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAkY29udGV4dFsibG9vcCJdLCAibGFzdCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjQzKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMjQ0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMjQ2CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICIgICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgKyskY29udGV4dFsnbG9vcCddWydpbmRleDAnXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICsrJGNvbnRleHRbJ2xvb3AnXVsnaW5kZXgnXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb250ZXh0Wydsb29wJ11bJ2ZpcnN0J10gPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc3NldCgkY29udGV4dFsnbG9vcCddWydsZW5ndGgnXSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLSRjb250ZXh0Wydsb29wJ11bJ3JldmluZGV4MCddOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tJGNvbnRleHRbJ2xvb3AnXVsncmV2aW5kZXgnXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29udGV4dFsnbG9vcCddWydsYXN0J10gPSAwID09PSAkY29udGV4dFsnbG9vcCddWydyZXZpbmRleDAnXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAkX3BhcmVudCA9ICRjb250ZXh0WydfcGFyZW50J107CiAgICAgICAgICAgICAgICAgICAgICAgIHVuc2V0KCRjb250ZXh0Wydfc2VxJ10sICRjb250ZXh0WydfaXRlcmF0ZWQnXSwgJGNvbnRleHRbJ19rZXknXSwgJGNvbnRleHRbJ2xpc3RlbmVyJ10sICRjb250ZXh0WydfcGFyZW50J10sICRjb250ZXh0Wydsb29wJ10pOwogICAgICAgICAgICAgICAgICAgICAgICAkY29udGV4dCA9IGFycmF5X2ludGVyc2VjdF9rZXkoJGNvbnRleHQsICRfcGFyZW50KSArICRfcGFyZW50OwogICAgICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDI0NwogICAgICAgICAgICAgICAgICAgICAgICBlY2hvICIgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDI0OQogICAgICAgICAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvLyBsaW5lIDI1MAogICAgICAgICAgICAgICAgZWNobyAiICAgICAgICAiOwogICAgICAgICAgICB9IGVsc2VpZiAodHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDI1MCwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiZW5hYmxlZCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjUwKSkgewogICAgICAgICAgICAgICAgLy8gbGluZSAyNTEKICAgICAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJlbXB0eVwiPgogICAgICAgICAgICAgICAgPHA+VGhpcyByZXF1ZXN0IHdhcyBub3QgY292ZXJlZCBieSBhbnkgZmlyZXdhbGwuPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIGxpbmUgMjU1CiAgICAgICAgICAgIGVjaG8gIiAgICAiOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIGxpbmUgMjU2CiAgICAgICAgICAgIGVjaG8gIiAgICAgICAgPGRpdiBjbGFzcz1cImVtcHR5XCI+CiAgICAgICAgICAgIDxwPlRoZSBzZWN1cml0eSBjb21wb25lbnQgaXMgZGlzYWJsZWQuPC9wPgogICAgICAgIDwvZGl2PgogICAgIjsKICAgICAgICB9CiAgICAgICAgLy8gbGluZSAyNjAKICAgICAgICBlY2hvICIKICAgICI7CiAgICAgICAgLy8gbGluZSAyNjEKICAgICAgICBpZiAoICF0d2lnX3Rlc3RfZW1wdHkoKCh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKCRjb250ZXh0WyJjb2xsZWN0b3IiXSA/PyBudWxsKSwgInZvdGVycyIsIFtdLCAiYW55IiwgdHJ1ZSwgdHJ1ZSwgZmFsc2UsIDI2MSkpID8gKF90d2lnX2RlZmF1bHRfZmlsdGVyKHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoJGNvbnRleHRbImNvbGxlY3RvciJdID8/IG51bGwpLCAidm90ZXJzIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyNjEpLCBbXSkpIDogKFtdKSkpKSB7CiAgICAgICAgICAgIC8vIGxpbmUgMjYyCiAgICAgICAgICAgIGVjaG8gIiAgICAgICAgPGgyPlNlY3VyaXR5IFZvdGVycyA8c21hbGw+KCI7CiAgICAgICAgICAgIGVjaG8gdHdpZ19lc2NhcGVfZmlsdGVyKCR0aGlzLT5lbnYsIHR3aWdfbGVuZ3RoX2ZpbHRlcigkdGhpcy0+ZW52LCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMjYyLCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJ2b3RlcnMiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDI2MikpLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICBlY2hvICIpPC9zbWFsbD48L2gyPgoKICAgICAgICA8ZGl2IGNsYXNzPVwibWV0cmljc1wiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWV0cmljXCI+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInZhbHVlXCI+IjsKICAgICAgICAgICAgLy8gbGluZSAyNjYKICAgICAgICAgICAgZWNobyB0d2lnX2VzY2FwZV9maWx0ZXIoJHRoaXMtPmVudiwgKCh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKCRjb250ZXh0WyJjb2xsZWN0b3IiXSA/PyBudWxsKSwgInZvdGVyU3RyYXRlZ3kiLCBbXSwgImFueSIsIHRydWUsIHRydWUsIGZhbHNlLCAyNjYpKSA/IChfdHdpZ19kZWZhdWx0X2ZpbHRlcih0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKCRjb250ZXh0WyJjb2xsZWN0b3IiXSA/PyBudWxsKSwgInZvdGVyU3RyYXRlZ3kiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDI2NiksICJ1bmtub3duIikpIDogKCJ1bmtub3duIikpLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICBlY2hvICI8L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImxhYmVsXCI+U3RyYXRlZ3k8L3NwYW4+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8dGFibGUgY2xhc3M9XCJ2b3RlcnNcIj4KICAgICAgICAgICAgPHRoZWFkPgogICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0aD4jPC90aD4KICAgICAgICAgICAgICAgICAgICA8dGg+Vm90ZXIgY2xhc3M8L3RoPgogICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgPC90aGVhZD4KCiAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgIC8vIGxpbmUgMjgwCiAgICAgICAgICAgICRjb250ZXh0WydfcGFyZW50J10gPSAkY29udGV4dDsKICAgICAgICAgICAgJGNvbnRleHRbJ19zZXEnXSA9IHR3aWdfZW5zdXJlX3RyYXZlcnNhYmxlKHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAyODAsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgInZvdGVycyIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjgwKSk7CiAgICAgICAgICAgICRjb250ZXh0Wydsb29wJ10gPSBbCiAgICAgICAgICAgICAgJ3BhcmVudCcgPT4gJGNvbnRleHRbJ19wYXJlbnQnXSwKICAgICAgICAgICAgICAnaW5kZXgwJyA9PiAwLAogICAgICAgICAgICAgICdpbmRleCcgID0+IDEsCiAgICAgICAgICAgICAgJ2ZpcnN0JyAgPT4gdHJ1ZSwKICAgICAgICAgICAgXTsKICAgICAgICAgICAgaWYgKGlzX2FycmF5KCRjb250ZXh0Wydfc2VxJ10pIHx8IChpc19vYmplY3QoJGNvbnRleHRbJ19zZXEnXSkgJiYgJGNvbnRleHRbJ19zZXEnXSBpbnN0YW5jZW9mIFxDb3VudGFibGUpKSB7CiAgICAgICAgICAgICAgICAkbGVuZ3RoID0gY291bnQoJGNvbnRleHRbJ19zZXEnXSk7CiAgICAgICAgICAgICAgICAkY29udGV4dFsnbG9vcCddWydyZXZpbmRleDAnXSA9ICRsZW5ndGggLSAxOwogICAgICAgICAgICAgICAgJGNvbnRleHRbJ2xvb3AnXVsncmV2aW5kZXgnXSA9ICRsZW5ndGg7CiAgICAgICAgICAgICAgICAkY29udGV4dFsnbG9vcCddWydsZW5ndGgnXSA9ICRsZW5ndGg7CiAgICAgICAgICAgICAgICAkY29udGV4dFsnbG9vcCddWydsYXN0J10gPSAxID09PSAkbGVuZ3RoOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvcmVhY2ggKCRjb250ZXh0Wydfc2VxJ10gYXMgJGNvbnRleHRbIl9rZXkiXSA9PiAkY29udGV4dFsidm90ZXIiXSkgewogICAgICAgICAgICAgICAgLy8gbGluZSAyODEKICAgICAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XCJmb250LW5vcm1hbCB0ZXh0LXNtYWxsIHRleHQtbXV0ZWQgbm93cmFwXCI+IjsKICAgICAgICAgICAgICAgIC8vIGxpbmUgMjgyCiAgICAgICAgICAgICAgICBlY2hvIHR3aWdfZXNjYXBlX2ZpbHRlcigkdGhpcy0+ZW52LCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgJGNvbnRleHRbImxvb3AiXSwgImluZGV4IiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyODIpLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICAgICAgZWNobyAiPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwiZm9udC1ub3JtYWxcIj4iOwogICAgICAgICAgICAgICAgLy8gbGluZSAyODMKICAgICAgICAgICAgICAgIGVjaG8gJHRoaXMtPmVudi0+Z2V0RnVuY3Rpb24oJ3Byb2ZpbGVyX2R1bXAnKS0+Z2V0Q2FsbGFibGUoKSgkdGhpcy0+ZW52LCAkY29udGV4dFsidm90ZXIiXSk7CiAgICAgICAgICAgICAgICBlY2hvICI8L3RkPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgKyskY29udGV4dFsnbG9vcCddWydpbmRleDAnXTsKICAgICAgICAgICAgICAgICsrJGNvbnRleHRbJ2xvb3AnXVsnaW5kZXgnXTsKICAgICAgICAgICAgICAgICRjb250ZXh0Wydsb29wJ11bJ2ZpcnN0J10gPSBmYWxzZTsKICAgICAgICAgICAgICAgIGlmIChpc3NldCgkY29udGV4dFsnbG9vcCddWydsZW5ndGgnXSkpIHsKICAgICAgICAgICAgICAgICAgICAtLSRjb250ZXh0Wydsb29wJ11bJ3JldmluZGV4MCddOwogICAgICAgICAgICAgICAgICAgIC0tJGNvbnRleHRbJ2xvb3AnXVsncmV2aW5kZXgnXTsKICAgICAgICAgICAgICAgICAgICAkY29udGV4dFsnbG9vcCddWydsYXN0J10gPSAwID09PSAkY29udGV4dFsnbG9vcCddWydyZXZpbmRleDAnXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAkX3BhcmVudCA9ICRjb250ZXh0WydfcGFyZW50J107CiAgICAgICAgICAgIHVuc2V0KCRjb250ZXh0Wydfc2VxJ10sICRjb250ZXh0WydfaXRlcmF0ZWQnXSwgJGNvbnRleHRbJ19rZXknXSwgJGNvbnRleHRbJ3ZvdGVyJ10sICRjb250ZXh0WydfcGFyZW50J10sICRjb250ZXh0Wydsb29wJ10pOwogICAgICAgICAgICAkY29udGV4dCA9IGFycmF5X2ludGVyc2VjdF9rZXkoJGNvbnRleHQsICRfcGFyZW50KSArICRfcGFyZW50OwogICAgICAgICAgICAvLyBsaW5lIDI4NgogICAgICAgICAgICBlY2hvICIgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgIDwvdGFibGU+CiAgICAiOwogICAgICAgIH0KICAgICAgICAvLyBsaW5lIDI4OQogICAgICAgIGVjaG8gIgogICAgIjsKICAgICAgICAvLyBsaW5lIDI5MAogICAgICAgIGlmICggIXR3aWdfdGVzdF9lbXB0eSgoKHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoJGNvbnRleHRbImNvbGxlY3RvciJdID8/IG51bGwpLCAiYWNjZXNzRGVjaXNpb25Mb2ciLCBbXSwgImFueSIsIHRydWUsIHRydWUsIGZhbHNlLCAyOTApKSA/IChfdHdpZ19kZWZhdWx0X2ZpbHRlcih0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKCRjb250ZXh0WyJjb2xsZWN0b3IiXSA/PyBudWxsKSwgImFjY2Vzc0RlY2lzaW9uTG9nIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyOTApLCBbXSkpIDogKFtdKSkpKSB7CiAgICAgICAgICAgIC8vIGxpbmUgMjkxCiAgICAgICAgICAgIGVjaG8gIiAgICAgICAgPGgyPkFjY2VzcyBkZWNpc2lvbiBsb2c8L2gyPgoKICAgICAgICA8dGFibGUgY2xhc3M9XCJkZWNpc2lvbi1sb2dcIj4KICAgICAgICAgICAgPGNvbCBzdHlsZT1cIndpZHRoOiAzMHB4XCI+CiAgICAgICAgICAgIDxjb2wgc3R5bGU9XCJ3aWR0aDogMTIwcHhcIj4KICAgICAgICAgICAgPGNvbCBzdHlsZT1cIndpZHRoOiAyNSVcIj4KICAgICAgICAgICAgPGNvbCBzdHlsZT1cIndpZHRoOiA2MCVcIj4KCiAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICA8dGg+IzwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoPlJlc3VsdDwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoPkF0dHJpYnV0ZXM8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aD5PYmplY3Q8L3RoPgogICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgPC90aGVhZD4KCiAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgIC8vIGxpbmUgMzA5CiAgICAgICAgICAgICRjb250ZXh0WydfcGFyZW50J10gPSAkY29udGV4dDsKICAgICAgICAgICAgJGNvbnRleHRbJ19zZXEnXSA9IHR3aWdfZW5zdXJlX3RyYXZlcnNhYmxlKHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAzMDksICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImFjY2Vzc0RlY2lzaW9uTG9nIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAzMDkpKTsKICAgICAgICAgICAgJGNvbnRleHRbJ2xvb3AnXSA9IFsKICAgICAgICAgICAgICAncGFyZW50JyA9PiAkY29udGV4dFsnX3BhcmVudCddLAogICAgICAgICAgICAgICdpbmRleDAnID0+IDAsCiAgICAgICAgICAgICAgJ2luZGV4JyAgPT4gMSwKICAgICAgICAgICAgICAnZmlyc3QnICA9PiB0cnVlLAogICAgICAgICAgICBdOwogICAgICAgICAgICBpZiAoaXNfYXJyYXkoJGNvbnRleHRbJ19zZXEnXSkgfHwgKGlzX29iamVjdCgkY29udGV4dFsnX3NlcSddKSAmJiAkY29udGV4dFsnX3NlcSddIGluc3RhbmNlb2YgXENvdW50YWJsZSkpIHsKICAgICAgICAgICAgICAgICRsZW5ndGggPSBjb3VudCgkY29udGV4dFsnX3NlcSddKTsKICAgICAgICAgICAgICAgICRjb250ZXh0Wydsb29wJ11bJ3JldmluZGV4MCddID0gJGxlbmd0aCAtIDE7CiAgICAgICAgICAgICAgICAkY29udGV4dFsnbG9vcCddWydyZXZpbmRleCddID0gJGxlbmd0aDsKICAgICAgICAgICAgICAgICRjb250ZXh0Wydsb29wJ11bJ2xlbmd0aCddID0gJGxlbmd0aDsKICAgICAgICAgICAgICAgICRjb250ZXh0Wydsb29wJ11bJ2xhc3QnXSA9IDEgPT09ICRsZW5ndGg7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZm9yZWFjaCAoJGNvbnRleHRbJ19zZXEnXSBhcyAkY29udGV4dFsiX2tleSJdID0+ICRjb250ZXh0WyJkZWNpc2lvbiJdKSB7CiAgICAgICAgICAgICAgICAvLyBsaW5lIDMxMAogICAgICAgICAgICAgICAgZWNobyAiICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cImZvbnQtbm9ybWFsIHRleHQtc21hbGwgdGV4dC1tdXRlZCBub3dyYXBcIj4iOwogICAgICAgICAgICAgICAgLy8gbGluZSAzMTEKICAgICAgICAgICAgICAgIGVjaG8gdHdpZ19lc2NhcGVfZmlsdGVyKCR0aGlzLT5lbnYsIHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAkY29udGV4dFsibG9vcCJdLCAiaW5kZXgiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDMxMSksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICBlY2hvICI8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XCJmb250LW5vcm1hbFwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgICAgIC8vIGxpbmUgMzEzCiAgICAgICAgICAgICAgICBlY2hvICgodHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsICRjb250ZXh0WyJkZWNpc2lvbiJdLCAicmVzdWx0IiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAzMTMpKSA/ICgiPHNwYW4gY2xhc3M9XCJsYWJlbCBzdGF0dXMtc3VjY2VzcyBzYW1lLXdpZHRoXCI+R1JBTlRFRDwvc3Bhbj4iKSA6ICgiPHNwYW4gY2xhc3M9XCJsYWJlbCBzdGF0dXMtZXJyb3Igc2FtZS13aWR0aFwiPkRFTklFRDwvc3Bhbj4iKSk7CiAgICAgICAgICAgICAgICAvLyBsaW5lIDMxNgogICAgICAgICAgICAgICAgZWNobyAiCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICAvLyBsaW5lIDMxOQogICAgICAgICAgICAgICAgaWYgKCh0d2lnX2xlbmd0aF9maWx0ZXIoJHRoaXMtPmVudiwgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsICRjb250ZXh0WyJkZWNpc2lvbiJdLCAiYXR0cmlidXRlcyIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMzE5KSkgPT0gMSkpIHsKICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDMyMAogICAgICAgICAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgICAgICAgICAkY29udGV4dFsiYXR0cmlidXRlIl0gPSB0d2lnX2ZpcnN0KCR0aGlzLT5lbnYsIHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAkY29udGV4dFsiZGVjaXNpb24iXSwgImF0dHJpYnV0ZXMiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDMyMCkpOwogICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMzIxCiAgICAgICAgICAgICAgICAgICAgZWNobyAiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgICAgIGlmICh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKCRjb250ZXh0WyJhdHRyaWJ1dGUiXSA/PyBudWxsKSwgImV4cHJlc3Npb24iLCBbXSwgImFueSIsIHRydWUsIHRydWUsIGZhbHNlLCAzMjEpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMzIyCiAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV4cHJlc3Npb246IDxwcmU+PGNvZGU+IjsKICAgICAgICAgICAgICAgICAgICAgICAgZWNobyB0d2lnX2VzY2FwZV9maWx0ZXIoJHRoaXMtPmVudiwgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiYXR0cmlidXRlIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImF0dHJpYnV0ZSIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJhdHRyaWJ1dGUiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJhdHRyaWJ1dGUiIGRvZXMgbm90IGV4aXN0LicsIDMyMiwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiZXhwcmVzc2lvbiIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMzIyKSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAiPC9jb2RlPjwvcHJlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlaWYgKCh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDMyMwooaXNzZXQoJGNvbnRleHRbImF0dHJpYnV0ZSJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJhdHRyaWJ1dGUiLCAkY29udGV4dCkgPyAkY29udGV4dFsiYXR0cmlidXRlIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiYXR0cmlidXRlIiBkb2VzIG5vdCBleGlzdC4nLCAzMjMsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgInR5cGUiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDMyMykgPT0gInN0cmluZyIpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMzI0CiAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gdHdpZ19lc2NhcGVfZmlsdGVyKCR0aGlzLT5lbnYsIChpc3NldCgkY29udGV4dFsiYXR0cmlidXRlIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImF0dHJpYnV0ZSIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJhdHRyaWJ1dGUiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJhdHRyaWJ1dGUiIGRvZXMgbm90IGV4aXN0LicsIDMyNCwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICAgICAgICAgICAgICBlY2hvICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMzI2CiAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgICAgICAgICBlY2hvICR0aGlzLT5lbnYtPmdldEZ1bmN0aW9uKCdwcm9maWxlcl9kdW1wJyktPmdldENhbGxhYmxlKCkoJHRoaXMtPmVudiwgKGlzc2V0KCRjb250ZXh0WyJhdHRyaWJ1dGUiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiYXR0cmlidXRlIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImF0dHJpYnV0ZSJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImF0dHJpYnV0ZSIgZG9lcyBub3QgZXhpc3QuJywgMzI2LCAkdGhpcy0+c291cmNlKTsgfSkoKSkpOwogICAgICAgICAgICAgICAgICAgICAgICBlY2hvICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDMyOAogICAgICAgICAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDMyOQogICAgICAgICAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgICAgICAgICBlY2hvICR0aGlzLT5lbnYtPmdldEZ1bmN0aW9uKCdwcm9maWxlcl9kdW1wJyktPmdldENhbGxhYmxlKCkoJHRoaXMtPmVudiwgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsICRjb250ZXh0WyJkZWNpc2lvbiJdLCAiYXR0cmlidXRlcyIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMzI5KSk7CiAgICAgICAgICAgICAgICAgICAgZWNobyAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy8gbGluZSAzMzEKICAgICAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4iOwogICAgICAgICAgICAgICAgLy8gbGluZSAzMzIKICAgICAgICAgICAgICAgIGVjaG8gJHRoaXMtPmVudi0+Z2V0RnVuY3Rpb24oJ3Byb2ZpbGVyX2R1bXAnKS0+Z2V0Q2FsbGFibGUoKSgkdGhpcy0+ZW52LCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgJGNvbnRleHRbImRlY2lzaW9uIl0sICJzZWVrIiwgWzAgPT4gIm9iamVjdCJdLCAibWV0aG9kIiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMzMyKSk7CiAgICAgICAgICAgICAgICBlY2hvICI8L3RkPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgKyskY29udGV4dFsnbG9vcCddWydpbmRleDAnXTsKICAgICAgICAgICAgICAgICsrJGNvbnRleHRbJ2xvb3AnXVsnaW5kZXgnXTsKICAgICAgICAgICAgICAgICRjb250ZXh0Wydsb29wJ11bJ2ZpcnN0J10gPSBmYWxzZTsKICAgICAgICAgICAgICAgIGlmIChpc3NldCgkY29udGV4dFsnbG9vcCddWydsZW5ndGgnXSkpIHsKICAgICAgICAgICAgICAgICAgICAtLSRjb250ZXh0Wydsb29wJ11bJ3JldmluZGV4MCddOwogICAgICAgICAgICAgICAgICAgIC0tJGNvbnRleHRbJ2xvb3AnXVsncmV2aW5kZXgnXTsKICAgICAgICAgICAgICAgICAgICAkY29udGV4dFsnbG9vcCddWydsYXN0J10gPSAwID09PSAkY29udGV4dFsnbG9vcCddWydyZXZpbmRleDAnXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAkX3BhcmVudCA9ICRjb250ZXh0WydfcGFyZW50J107CiAgICAgICAgICAgIHVuc2V0KCRjb250ZXh0Wydfc2VxJ10sICRjb250ZXh0WydfaXRlcmF0ZWQnXSwgJGNvbnRleHRbJ19rZXknXSwgJGNvbnRleHRbJ2RlY2lzaW9uJ10sICRjb250ZXh0WydfcGFyZW50J10sICRjb250ZXh0Wydsb29wJ10pOwogICAgICAgICAgICAkY29udGV4dCA9IGFycmF5X2ludGVyc2VjdF9rZXkoJGNvbnRleHQsICRfcGFyZW50KSArICRfcGFyZW50OwogICAgICAgICAgICAvLyBsaW5lIDMzNQogICAgICAgICAgICBlY2hvICIgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgIDwvdGFibGU+CiAgICAiOwogICAgICAgIH0KICAgICAgICAKICAgICAgICAkX19pbnRlcm5hbF8zMTkzOTM0NjEzMDk4OTI5MjRmZjZlNzRkNmQ2ZTY0Mjg3ZGY2NGI2MzU0NWI5OTRlMTAwZDRhYjIyM2FlZDAyLT5sZWF2ZSgkX19pbnRlcm5hbF8zMTkzOTM0NjEzMDk4OTI5MjRmZjZlNzRkNmQ2ZTY0Mjg3ZGY2NGI2MzU0NWI5OTRlMTAwZDRhYjIyM2FlZDAyX3Byb2YpOwoKICAgICAgICAKICAgICAgICAkX19pbnRlcm5hbF8wODViMDE0MjgwNjIwMjU5OWM3ZmUzYjMyOTE2NGE5MjM5N2Q4OTc4MjA3YTM3ZTc5ZDcwYjhjNTI1OTllMzNlLT5sZWF2ZSgkX19pbnRlcm5hbF8wODViMDE0MjgwNjIwMjU5OWM3ZmUzYjMyOTE2NGE5MjM5N2Q4OTc4MjA3YTM3ZTc5ZDcwYjhjNTI1OTllMzNlX3Byb2YpOwoKICAgIH0KCiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0VGVtcGxhdGVOYW1lKCkKICAgIHsKICAgICAgICByZXR1cm4gIlNlY3VyaXR5QnVuZGxlOkNvbGxlY3RvcjpzZWN1cml0eS5odG1sLnR3aWciOwogICAgfQoKICAgIHB1YmxpYyBmdW5jdGlvbiBpc1RyYWl0YWJsZSgpCiAgICB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIHB1YmxpYyBmdW5jdGlvbiBnZXREZWJ1Z0luZm8oKQogICAgewogICAgICAgIHJldHVybiBhcnJheSAoICA4MTAgPT4gMzM1LCAgNzkzID0+IDMzMiwgIDc5MCA9PiAzMzEsICA3ODQgPT4gMzI5LCAgNzgxID0+IDMyOCwgIDc3NSA9PiAzMjYsICA3NjkgPT4gMzI0LCAgNzY3ID0+IDMyMywgIDc2MiA9PiAzMjIsICA3NTkgPT4gMzIxLCAgNzU2ID0+IDMyMCwgIDc1NCA9PiAzMTksICA3NDkgPT4gMzE2LCAgNzQ3ID0+IDMxMywgIDc0MiA9PiAzMTEsICA3MzkgPT4gMzEwLCAgNzIyID0+IDMwOSwgIDcwMiA9PiAyOTEsICA3MDAgPT4gMjkwLCAgNjk3ID0+IDI4OSwgIDY5MiA9PiAyODYsICA2NzUgPT4gMjgzLCAgNjcxID0+IDI4MiwgIDY2OCA9PiAyODEsICA2NTEgPT4gMjgwLCAgNjM0ID0+IDI2NiwgIDYyNiA9PiAyNjIsICA2MjQgPT4gMjYxLCAgNjIxID0+IDI2MCwgIDYxNSA9PiAyNTYsICA2MTIgPT4gMjU1LCAgNjA2ID0+IDI1MSwgIDYwMyA9PiAyNTAsICA2MDAgPT4gMjQ5LCAgNTk2ID0+IDI0NywgIDU4MiA9PiAyNDYsICA1NzggPT4gMjQ0LCAgNTc2ID0+IDI0MywgIDU3MCA9PiAyNDAsICA1NjYgPT4gMjM5LCAgNTYyID0+IDIzOCwgIDU1OCA9PiAyMzYsICA1NTUgPT4gMjM1LCAgNTUzID0+IDIzNCwgIDU0OSA9PiAyMzIsICA1NDUgPT4gMjMwLCAgNTQyID0+IDIyOSwgIDUzOSA9PiAyMjgsICA1MjEgPT4gMjI3LCAgNTE5ID0+IDIyNiwgIDUwOCA9PiAyMTcsICA1MDIgPT4gMjEzLCAgNTAwID0+IDIxMiwgIDQ5MCA9PiAyMDUsICA0ODMgPT4gMjAxLCAgNDc2ID0+IDE5NywgIDQ2OSA9PiAxOTMsICA0NjIgPT4gMTg5LCAgNDU1ID0+IDE4NSwgIDQ0OCA9PiAxODEsICA0MzQgPT4gMTY5LCAgNDMyID0+IDE2OCwgIDQyNCA9PiAxNjMsICA0MTcgPT4gMTU5LCAgNDEwID0+IDE1NSwgIDQwMyA9PiAxNTEsICAzOTkgPT4gMTQ5LCAgMzk3ID0+IDE0OCwgIDM5MSA9PiAxNDQsICAzODUgPT4gMTQwLCAgMzgzID0+IDEzOSwgIDM3OSA9PiAxMzcsICAzNzMgPT4gMTM0LCAgMzY5ID0+IDEzMiwgIDM2NyA9PiAxMzEsICAzNjQgPT4gMTMwLCAgMzU4ID0+IDEyNywgIDM1NCA9PiAxMjUsICAzNTIgPT4gMTI0LCAgMzQ3ID0+IDEyMSwgIDM0MyA9PiAxMTksICAzNDEgPT4gMTE4LCAgMzM2ID0+IDExNiwgIDMxNyA9PiAxMDAsICAzMDkgPT4gOTUsICAzMDUgPT4gOTMsICAzMDIgPT4gOTIsICAzMDAgPT4gOTEsICAyOTYgPT4gODksICAyODYgPT4gODgsICAyNzIgPT4gODMsICAyNjcgPT4gODIsICAyNTcgPT4gODEsICAyNDUgPT4gNzgsICAyNDIgPT4gNzcsICAyMzggPT4gNzUsICAyMzIgPT4gNzEsICAyMjkgPT4gNzAsICAyMjQgPT4gNjcsICAyMTggPT4gNjUsICAyMTYgPT4gNjQsICAyMTIgPT4gNjMsICAyMDcgPT4gNjAsICAyMDUgPT4gNTksICAyMDIgPT4gNTgsICAxOTYgPT4gNTUsICAxOTIgPT4gNTMsICAxOTAgPT4gNTIsICAxODcgPT4gNTEsICAxODAgPT4gNDYsICAxNzQgPT4gNDMsICAxNjQgPT4gMzgsICAxNTYgPT4gMzMsICAxNTIgPT4gMzEsICAxNDkgPT4gMzAsICAxNDcgPT4gMjksICAxNDMgPT4gMjcsICAxMzYgPT4gMjMsICAxMzEgPT4gMjAsICAxMjggPT4gMTksICAxMjYgPT4gMTgsICAxMjMgPT4gMTcsICAxMTggPT4gMTUsICAxMTMgPT4gMTQsICAxMTEgPT4gMTMsICAxMDggPT4gMTIsICAxMDUgPT4gMTEsICAxMDIgPT4gMTAsICA5OSA9PiA5LCAgOTYgPT4gOCwgIDkzID0+IDcsICA5MCA9PiA2LCAgODAgPT4gNSwgIDYxID0+IDMsICAzOCA9PiAxLCk7CiAgICB9CgogICAgcHVibGljIGZ1bmN0aW9uIGdldFNvdXJjZUNvbnRleHQoKQogICAgewogICAgICAgIHJldHVybiBuZXcgU291cmNlKCJ7JSBleHRlbmRzICdAV2ViUHJvZmlsZXIvUHJvZmlsZXIvbGF5b3V0Lmh0bWwudHdpZycgJX0KCnslIGJsb2NrIHBhZ2VfdGl0bGUgJ1NlY3VyaXR5JyAlfQoKeyUgYmxvY2sgdG9vbGJhciAlfQogICAgeyUgaWYgY29sbGVjdG9yLnRva2VuICV9CiAgICAgICAgeyUgc2V0IGlzX2F1dGhlbnRpY2F0ZWQgPSBjb2xsZWN0b3IuZW5hYmxlZCBhbmQgY29sbGVjdG9yLmF1dGhlbnRpY2F0ZWQgICV9CiAgICAgICAgeyUgc2V0IGNvbG9yX2NvZGUgPSBpc19hdXRoZW50aWNhdGVkID8gJycgOiAneWVsbG93JyAlfQogICAgeyUgZWxzZSAlfQogICAgICAgIHslIHNldCBjb2xvcl9jb2RlID0gY29sbGVjdG9yLmVuYWJsZWQgPyAncmVkJyA6ICcnICV9CiAgICB7JSBlbmRpZiAlfQoKICAgIHslIHNldCBpY29uICV9CiAgICAgICAge3sgaW5jbHVkZSgnQFNlY3VyaXR5L0NvbGxlY3Rvci9pY29uLnN2ZycpIH19CiAgICAgICAgPHNwYW4gY2xhc3M9XCJzZi10b29sYmFyLXZhbHVlXCI+e3sgY29sbGVjdG9yLnVzZXJ8ZGVmYXVsdCgnbi9hJykgfX08L3NwYW4+CiAgICB7JSBlbmRzZXQgJX0KCiAgICB7JSBzZXQgdGV4dCAlfQogICAgICAgIHslIGlmIGNvbGxlY3Rvci5pbXBlcnNvbmF0ZWQgJX0KICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNmLXRvb2xiYXItaW5mby1ncm91cFwiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNmLXRvb2xiYXItaW5mby1waWVjZVwiPgogICAgICAgICAgICAgICAgICAgIDxiPkltcGVyc29uYXRvcjwvYj4KICAgICAgICAgICAgICAgICAgICA8c3Bhbj57eyBjb2xsZWN0b3IuaW1wZXJzb25hdG9yVXNlciB9fTwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICB7JSBlbmRpZiAlfQoKICAgICAgICA8ZGl2IGNsYXNzPVwic2YtdG9vbGJhci1pbmZvLWdyb3VwXCI+CiAgICAgICAgICAgIHslIGlmIGNvbGxlY3Rvci5lbmFibGVkICV9CiAgICAgICAgICAgICAgICB7JSBpZiBjb2xsZWN0b3IudG9rZW4gJX0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2YtdG9vbGJhci1pbmZvLXBpZWNlXCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxiPkxvZ2dlZCBpbiBhczwvYj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+e3sgY29sbGVjdG9yLnVzZXIgfX08L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzZi10b29sYmFyLWluZm8tcGllY2VcIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGI+QXV0aGVudGljYXRlZDwvYj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzZi10b29sYmFyLXN0YXR1cyBzZi10b29sYmFyLXN0YXR1cy17eyBpc19hdXRoZW50aWNhdGVkID8gJ2dyZWVuJyA6ICdyZWQnIH19XCI+e3sgaXNfYXV0aGVudGljYXRlZCA/ICdZZXMnIDogJ05vJyB9fTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNmLXRvb2xiYXItaW5mby1waWVjZVwiPgogICAgICAgICAgICAgICAgICAgICAgICA8Yj5Ub2tlbiBjbGFzczwvYj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+e3sgY29sbGVjdG9yLnRva2VuQ2xhc3N8YWJicl9jbGFzcyB9fTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIHslIGVsc2UgJX0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2YtdG9vbGJhci1pbmZvLXBpZWNlXCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxiPkF1dGhlbnRpY2F0ZWQ8L2I+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic2YtdG9vbGJhci1zdGF0dXMgc2YtdG9vbGJhci1zdGF0dXMtcmVkXCI+Tm88L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICB7JSBlbmRpZiAlfQoKICAgICAgICAgICAgICAgIHslIGlmIGNvbGxlY3Rvci5maXJld2FsbCAlfQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzZi10b29sYmFyLWluZm8tcGllY2VcIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGI+RmlyZXdhbGwgbmFtZTwvYj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+e3sgY29sbGVjdG9yLmZpcmV3YWxsLm5hbWUgfX08L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICB7JSBlbmRpZiAlfQoKICAgICAgICAgICAgICAgIHslIGlmIGNvbGxlY3Rvci50b2tlbiBhbmQgY29sbGVjdG9yLmxvZ291dFVybCAlfQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzZi10b29sYmFyLWluZm8tcGllY2VcIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGI+QWN0aW9uczwvYj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwie3sgY29sbGVjdG9yLmxvZ291dFVybCB9fVwiPkxvZ291dDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHslIGlmIGNvbGxlY3Rvci5pbXBlcnNvbmF0ZWQgYW5kIGNvbGxlY3Rvci5pbXBlcnNvbmF0aW9uRXhpdFBhdGggJX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDxhIGhyZWY9XCJ7eyBjb2xsZWN0b3IuaW1wZXJzb25hdGlvbkV4aXRQYXRoIH19XCI+RXhpdCBpbXBlcnNvbmF0aW9uPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgeyUgZW5kaWYgJX0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgeyUgZW5kaWYgJX0KICAgICAgICAgICAgeyUgZWxzZSAlfQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNmLXRvb2xiYXItaW5mby1waWVjZVwiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuPlRoZSBzZWN1cml0eSBpcyBkaXNhYmxlZC48L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgeyUgZW5kaWYgJX0KICAgICAgICA8L2Rpdj4KICAgIHslIGVuZHNldCAlfQoKICAgIHt7IGluY2x1ZGUoJ0BXZWJQcm9maWxlci9Qcm9maWxlci90b29sYmFyX2l0ZW0uaHRtbC50d2lnJywgeyBsaW5rOiBwcm9maWxlcl91cmwsIHN0YXR1czogY29sb3JfY29kZSB9KSB9fQp7JSBlbmRibG9jayAlfQoKeyUgYmxvY2sgbWVudSAlfQogICAgPHNwYW4gY2xhc3M9XCJsYWJlbCB7eyBub3QgY29sbGVjdG9yLmVuYWJsZWQgb3Igbm90IGNvbGxlY3Rvci50b2tlbiA/ICdkaXNhYmxlZCcgfX1cIj4KICAgICAgICA8c3BhbiBjbGFzcz1cImljb25cIj57eyBpbmNsdWRlKCdAU2VjdXJpdHkvQ29sbGVjdG9yL2ljb24uc3ZnJykgfX08L3NwYW4+CiAgICAgICAgPHN0cm9uZz5TZWN1cml0eTwvc3Ryb25nPgogICAgPC9zcGFuPgp7JSBlbmRibG9jayAlfQoKeyUgYmxvY2sgcGFuZWwgJX0KICAgIDxoMj5TZWN1cml0eSBUb2tlbjwvaDI+CgogICAgeyUgaWYgY29sbGVjdG9yLmVuYWJsZWQgJX0KICAgICAgICB7JSBpZiBjb2xsZWN0b3IudG9rZW4gJX0KICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1ldHJpY3NcIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtZXRyaWNcIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInZhbHVlXCI+e3sgY29sbGVjdG9yLnVzZXIgPT0gJ2Fub24uJyA/ICdBbm9ueW1vdXMnIDogY29sbGVjdG9yLnVzZXIgfX08L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJsYWJlbFwiPlVzZXJuYW1lPC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1ldHJpY1wiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidmFsdWVcIj57eyBpbmNsdWRlKCdAV2ViUHJvZmlsZXIvSWNvbi8nIH4gKGNvbGxlY3Rvci5hdXRoZW50aWNhdGVkID8gJ3llcycgOiAnbm8nKSB+ICcuc3ZnJykgfX08L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJsYWJlbFwiPkF1dGhlbnRpY2F0ZWQ8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8dGFibGU+CiAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICA8dGggc2NvcGU9XCJjb2xcIiBjbGFzcz1cImtleVwiPlByb3BlcnR5PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRoIHNjb3BlPVwiY29sXCI+VmFsdWU8L3RoPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICA8L3RoZWFkPgogICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlJvbGVzPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgY29sbGVjdG9yLnJvbGVzIGlzIGVtcHR5ID8gJ25vbmUnIDogcHJvZmlsZXJfZHVtcChjb2xsZWN0b3Iucm9sZXMsIG1heERlcHRoPTEpIH19CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgeyUgaWYgbm90IGNvbGxlY3Rvci5hdXRoZW50aWNhdGVkIGFuZCBjb2xsZWN0b3Iucm9sZXMgaXMgZW1wdHkgJX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cImhlbHBcIj5Vc2VyIGlzIG5vdCBhdXRoZW50aWNhdGVkIHByb2JhYmx5IGJlY2F1c2UgdGhleSBoYXZlIG5vIHJvbGVzLjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHslIGVuZGlmICV9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPC90cj4KCiAgICAgICAgICAgICAgICAgICAgeyUgaWYgY29sbGVjdG9yLnN1cHBvcnRzUm9sZUhpZXJhcmNoeSAlfQogICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkluaGVyaXRlZCBSb2xlczwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57eyBjb2xsZWN0b3IuaW5oZXJpdGVkUm9sZXMgaXMgZW1wdHkgPyAnbm9uZScgOiBwcm9maWxlcl9kdW1wKGNvbGxlY3Rvci5pbmhlcml0ZWRSb2xlcywgbWF4RGVwdGg9MSkgfX08L3RkPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgeyUgZW5kaWYgJX0KCiAgICAgICAgICAgICAgICAgICAgeyUgaWYgY29sbGVjdG9yLnRva2VuICV9CiAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICA8dGg+VG9rZW48L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e3sgcHJvZmlsZXJfZHVtcChjb2xsZWN0b3IudG9rZW4pIH19PC90ZD4KICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgIHslIGVuZGlmICV9CiAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICA8L3RhYmxlPgogICAgICAgIHslIGVsc2VpZiBjb2xsZWN0b3IuZW5hYmxlZCAlfQogICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZW1wdHlcIj4KICAgICAgICAgICAgICAgIDxwPlRoZXJlIGlzIG5vIHNlY3VyaXR5IHRva2VuLjwvcD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgeyUgZW5kaWYgJX0KCgogICAgICAgIDxoMj5TZWN1cml0eSBGaXJld2FsbDwvaDI+CgogICAgICAgIHslIGlmIGNvbGxlY3Rvci5maXJld2FsbCAlfQogICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWV0cmljc1wiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1ldHJpY1wiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidmFsdWVcIj57eyBjb2xsZWN0b3IuZmlyZXdhbGwubmFtZSB9fTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImxhYmVsXCI+TmFtZTwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1ldHJpY1wiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidmFsdWVcIj57eyBpbmNsdWRlKCdAV2ViUHJvZmlsZXIvSWNvbi8nIH4gKGNvbGxlY3Rvci5maXJld2FsbC5zZWN1cml0eV9lbmFibGVkID8gJ3llcycgOiAnbm8nKSB+ICcuc3ZnJykgfX08L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJsYWJlbFwiPlNlY3VyaXR5IGVuYWJsZWQ8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtZXRyaWNcIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInZhbHVlXCI+e3sgaW5jbHVkZSgnQFdlYlByb2ZpbGVyL0ljb24vJyB+IChjb2xsZWN0b3IuZmlyZXdhbGwuc3RhdGVsZXNzID8gJ3llcycgOiAnbm8nKSB+ICcuc3ZnJykgfX08L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJsYWJlbFwiPlN0YXRlbGVzczwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1ldHJpY1wiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidmFsdWVcIj57eyBpbmNsdWRlKCdAV2ViUHJvZmlsZXIvSWNvbi8nIH4gKGNvbGxlY3Rvci5maXJld2FsbC5hbGxvd3NfYW5vbnltb3VzID8gJ3llcycgOiAnbm8nKSB+ICcuc3ZnJykgfX08L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJsYWJlbFwiPkFsbG93cyBhbm9ueW1vdXM8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICB7JSBpZiBjb2xsZWN0b3IuZmlyZXdhbGwuc2VjdXJpdHlfZW5hYmxlZCAlfQogICAgICAgICAgICAgICAgPGg0PkNvbmZpZ3VyYXRpb248L2g0PgoKICAgICAgICAgICAgICAgIDx0YWJsZT4KICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBzY29wZT1cImNvbFwiIGNsYXNzPVwia2V5XCI+S2V5PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBzY29wZT1cImNvbFwiPlZhbHVlPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPgogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPnByb3ZpZGVyPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57eyBjb2xsZWN0b3IuZmlyZXdhbGwucHJvdmlkZXIgPzogJyhub25lKScgfX08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+Y29udGV4dDwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e3sgY29sbGVjdG9yLmZpcmV3YWxsLmNvbnRleHQgPzogJyhub25lKScgfX08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+ZW50cnlfcG9pbnQ8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt7IGNvbGxlY3Rvci5maXJld2FsbC5lbnRyeV9wb2ludCA/OiAnKG5vbmUpJyB9fTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD51c2VyX2NoZWNrZXI8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt7IGNvbGxlY3Rvci5maXJld2FsbC51c2VyX2NoZWNrZXIgPzogJyhub25lKScgfX08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+YWNjZXNzX2RlbmllZF9oYW5kbGVyPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57eyBjb2xsZWN0b3IuZmlyZXdhbGwuYWNjZXNzX2RlbmllZF9oYW5kbGVyID86ICcobm9uZSknIH19PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPmFjY2Vzc19kZW5pZWRfdXJsPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57eyBjb2xsZWN0b3IuZmlyZXdhbGwuYWNjZXNzX2RlbmllZF91cmwgPzogJyhub25lKScgfX08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+bGlzdGVuZXJzPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57eyBjb2xsZWN0b3IuZmlyZXdhbGwubGlzdGVuZXJzIGlzIGVtcHR5ID8gJyhub25lKScgOiBwcm9maWxlcl9kdW1wKGNvbGxlY3Rvci5maXJld2FsbC5saXN0ZW5lcnMsIG1heERlcHRoPTEpIH19PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgICAgPC90YWJsZT4KCiAgICAgICAgICAgICAgICA8aDQ+TGlzdGVuZXJzPC9oND4KCiAgICAgICAgICAgICAgICB7JSBpZiBjb2xsZWN0b3IubGlzdGVuZXJzfGRlZmF1bHQoW10pIGlzIGVtcHR5ICV9CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImVtcHR5XCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwPk5vIHNlY3VyaXR5IGxpc3RlbmVycyBoYXZlIGJlZW4gcmVjb3JkZWQuIENoZWNrIHRoYXQgZGVidWdnaW5nIGlzIGVuYWJsZWQgaW4gdGhlIGtlcm5lbC48L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICB7JSBlbHNlICV9CiAgICAgICAgICAgICAgICAgICAgPHRhYmxlPgogICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5MaXN0ZW5lcjwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+RHVyYXRpb248L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlJlc3BvbnNlPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4KCiAgICAgICAgICAgICAgICAgICAgICAgIHslIHNldCBwcmV2aW91c19ldmVudCA9IChjb2xsZWN0b3IubGlzdGVuZXJzfGZpcnN0KSAlfQogICAgICAgICAgICAgICAgICAgICAgICB7JSBmb3IgbGlzdGVuZXIgaW4gY29sbGVjdG9yLmxpc3RlbmVycyAlfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgeyUgaWYgbG9vcC5maXJzdCBvciBsaXN0ZW5lciAhPSBwcmV2aW91c19ldmVudCAlfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHslIGlmIG5vdCBsb29wLmZpcnN0ICV9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyUgZW5kaWYgJX0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHslIHNldCBwcmV2aW91c19ldmVudCA9IGxpc3RlbmVyICV9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7JSBlbmRpZiAlfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XCJmb250LW5vcm1hbFwiPnt7IHByb2ZpbGVyX2R1bXAobGlzdGVuZXIuc3R1YikgfX08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cIm5vLXdyYXBcIj57eyAnJTAuMmYnfGZvcm1hdChsaXN0ZW5lci50aW1lICogMTAwMCkgfX0gbXM8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cImZvbnQtbm9ybWFsXCI+e3sgbGlzdGVuZXIucmVzcG9uc2UgPyBwcm9maWxlcl9kdW1wKGxpc3RlbmVyLnJlc3BvbnNlKSA6ICcobm9uZSknIH19PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgeyUgaWYgbG9vcC5sYXN0ICV9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHslIGVuZGlmICV9CiAgICAgICAgICAgICAgICAgICAgICAgIHslIGVuZGZvciAlfQogICAgICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgICAgICB7JSBlbmRpZiAlfQogICAgICAgICAgICB7JSBlbmRpZiAlfQogICAgICAgIHslIGVsc2VpZiBjb2xsZWN0b3IuZW5hYmxlZCAlfQogICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZW1wdHlcIj4KICAgICAgICAgICAgICAgIDxwPlRoaXMgcmVxdWVzdCB3YXMgbm90IGNvdmVyZWQgYnkgYW55IGZpcmV3YWxsLjwvcD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgeyUgZW5kaWYgJX0KICAgIHslIGVsc2UgJX0KICAgICAgICA8ZGl2IGNsYXNzPVwiZW1wdHlcIj4KICAgICAgICAgICAgPHA+VGhlIHNlY3VyaXR5IGNvbXBvbmVudCBpcyBkaXNhYmxlZC48L3A+CiAgICAgICAgPC9kaXY+CiAgICB7JSBlbmRpZiAlfQoKICAgIHslIGlmIGNvbGxlY3Rvci52b3RlcnN8ZGVmYXVsdChbXSkgaXMgbm90IGVtcHR5ICV9CiAgICAgICAgPGgyPlNlY3VyaXR5IFZvdGVycyA8c21hbGw+KHt7IGNvbGxlY3Rvci52b3RlcnN8bGVuZ3RoIH19KTwvc21hbGw+PC9oMj4KCiAgICAgICAgPGRpdiBjbGFzcz1cIm1ldHJpY3NcIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1ldHJpY1wiPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ2YWx1ZVwiPnt7IGNvbGxlY3Rvci52b3RlclN0cmF0ZWd5fGRlZmF1bHQoJ3Vua25vd24nKSB9fTwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibGFiZWxcIj5TdHJhdGVneTwvc3Bhbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDx0YWJsZSBjbGFzcz1cInZvdGVyc1wiPgogICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgPHRoPiM8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aD5Wb3RlciBjbGFzczwvdGg+CiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICA8L3RoZWFkPgoKICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgeyUgZm9yIHZvdGVyIGluIGNvbGxlY3Rvci52b3RlcnMgJX0KICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cImZvbnQtbm9ybWFsIHRleHQtc21hbGwgdGV4dC1tdXRlZCBub3dyYXBcIj57eyBsb29wLmluZGV4IH19PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwiZm9udC1ub3JtYWxcIj57eyBwcm9maWxlcl9kdW1wKHZvdGVyKSB9fTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgIHslIGVuZGZvciAlfQogICAgICAgICAgICA8L3Rib2R5PgogICAgICAgIDwvdGFibGU+CiAgICB7JSBlbmRpZiAlfQoKICAgIHslIGlmIGNvbGxlY3Rvci5hY2Nlc3NEZWNpc2lvbkxvZ3xkZWZhdWx0KFtdKSBpcyBub3QgZW1wdHkgJX0KICAgICAgICA8aDI+QWNjZXNzIGRlY2lzaW9uIGxvZzwvaDI+CgogICAgICAgIDx0YWJsZSBjbGFzcz1cImRlY2lzaW9uLWxvZ1wiPgogICAgICAgICAgICA8Y29sIHN0eWxlPVwid2lkdGg6IDMwcHhcIj4KICAgICAgICAgICAgPGNvbCBzdHlsZT1cIndpZHRoOiAxMjBweFwiPgogICAgICAgICAgICA8Y29sIHN0eWxlPVwid2lkdGg6IDI1JVwiPgogICAgICAgICAgICA8Y29sIHN0eWxlPVwid2lkdGg6IDYwJVwiPgoKICAgICAgICAgICAgPHRoZWFkPgogICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0aD4jPC90aD4KICAgICAgICAgICAgICAgICAgICA8dGg+UmVzdWx0PC90aD4KICAgICAgICAgICAgICAgICAgICA8dGg+QXR0cmlidXRlczwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoPk9iamVjdDwvdGg+CiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICA8L3RoZWFkPgoKICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgeyUgZm9yIGRlY2lzaW9uIGluIGNvbGxlY3Rvci5hY2Nlc3NEZWNpc2lvbkxvZyAlfQogICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwiZm9udC1ub3JtYWwgdGV4dC1zbWFsbCB0ZXh0LW11dGVkIG5vd3JhcFwiPnt7IGxvb3AuaW5kZXggfX08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XCJmb250LW5vcm1hbFwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgZGVjaXNpb24ucmVzdWx0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnPHNwYW4gY2xhc3M9XCJsYWJlbCBzdGF0dXMtc3VjY2VzcyBzYW1lLXdpZHRoXCI+R1JBTlRFRDwvc3Bhbj4nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnPHNwYW4gY2xhc3M9XCJsYWJlbCBzdGF0dXMtZXJyb3Igc2FtZS13aWR0aFwiPkRFTklFRDwvc3Bhbj4nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fQogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7JSBpZiBkZWNpc2lvbi5hdHRyaWJ1dGVzfGxlbmd0aCA9PSAxICV9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyUgc2V0IGF0dHJpYnV0ZSA9IGRlY2lzaW9uLmF0dHJpYnV0ZXN8Zmlyc3QgJX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7JSBpZiBhdHRyaWJ1dGUuZXhwcmVzc2lvbiBpcyBkZWZpbmVkICV9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV4cHJlc3Npb246IDxwcmU+PGNvZGU+e3sgYXR0cmlidXRlLmV4cHJlc3Npb24gfX08L2NvZGU+PC9wcmU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyUgZWxzZWlmIGF0dHJpYnV0ZS50eXBlID09ICdzdHJpbmcnICV9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IGF0dHJpYnV0ZSB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHslIGVsc2UgJX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IHByb2ZpbGVyX2R1bXAoYXR0cmlidXRlKSB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHslIGVuZGlmICV9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7JSBlbHNlICV9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgcHJvZmlsZXJfZHVtcChkZWNpc2lvbi5hdHRyaWJ1dGVzKSB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgeyUgZW5kaWYgJX0KICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt7IHByb2ZpbGVyX2R1bXAoZGVjaXNpb24uc2Vlaygnb2JqZWN0JykpIH19PC90ZD4KICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgeyUgZW5kZm9yICV9CiAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgPC90YWJsZT4KICAgIHslIGVuZGlmICV9CnslIGVuZGJsb2NrICV9CiIsICJTZWN1cml0eUJ1bmRsZTpDb2xsZWN0b3I6c2VjdXJpdHkuaHRtbC50d2lnIiwgIi9BcHBsaWNhdGlvbnMvTUFNUC9odGRvY3MvUDhfMTgwNTIwMjMvdmVuZG9yL3N5bWZvbnkvc3ltZm9ueS9zcmMvU3ltZm9ueS9CdW5kbGUvU2VjdXJpdHlCdW5kbGUvUmVzb3VyY2VzL3ZpZXdzL0NvbGxlY3Rvci9zZWN1cml0eS5odG1sLnR3aWciKTsKICAgIH0KfQoiO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbmFtZXNwYWNlcyI7YTowOnt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbmNsdWRlcyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBmdW5jdGlvbnMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY29uc3RhbnRzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNsYXNzZXMiO2E6MTp7czo4MDoiXF9fVHdpZ1RlbXBsYXRlXzRhYjA5YmVlNzA0ZTQ2NzlmZGRjZjEzMDNhMWI5MjFmZWVmZDQwZmExOWFhNjEzMmM3MTIxYjBkYTNmZjk5N2QiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfIjoxMTp7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6ODA6IlxfX1R3aWdUZW1wbGF0ZV80YWIwOWJlZTcwNGU0Njc5ZmRkY2YxMzAzYTFiOTIxZmVlZmQ0MGZhMTlhYTYxMzJjNzEyMWIwZGEzZmY5OTdkIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6Nzk6Il9fVHdpZ1RlbXBsYXRlXzRhYjA5YmVlNzA0ZTQ2NzlmZGRjZjEzMDNhMWI5MjFmZWVmZDQwZmExOWFhNjEzMmM3MTIxYjBkYTNmZjk5N2QiO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AZG9jQmxvY2siO047czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGFic3RyYWN0IjtiOjA7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGZpbmFsIjtiOjA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAHBhcmVudCI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjE0OiJcVHdpZ1xUZW1wbGF0ZSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjg6IlRlbXBsYXRlIjt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGltcGxlbWVudHMiO2E6MDp7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBjb25zdGFudHMiO2E6MDp7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBwcm9wZXJ0aWVzIjthOjI6e3M6ODk6IlxfX1R3aWdUZW1wbGF0ZV80YWIwOWJlZTcwNGU0Njc5ZmRkY2YxMzAzYTFiOTIxZmVlZmQ0MGZhMTlhYTYxMzJjNzEyMWIwZGEzZmY5OTdkOjokc291cmNlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5Ijo4OntzOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQBmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjg5OiJcX19Ud2lnVGVtcGxhdGVfNGFiMDliZWU3MDRlNDY3OWZkZGNmMTMwM2ExYjkyMWZlZWZkNDBmYTE5YWE2MTMyYzcxMjFiMGRhM2ZmOTk3ZDo6JHNvdXJjZSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjY6InNvdXJjZSI7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5AGRvY0Jsb2NrIjtOO3M6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5AHR5cGVzIjthOjA6e31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQBkZWZhdWx0IjtOO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5AHN0YXRpYyI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5AHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjc6InByaXZhdGUiO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQBsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MTg7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAdHlwZSI7Tjt9czo4OToiXF9fVHdpZ1RlbXBsYXRlXzRhYjA5YmVlNzA0ZTQ2NzlmZGRjZjEzMDNhMWI5MjFmZWVmZDQwZmExOWFhNjEzMmM3MTIxYjBkYTNmZjk5N2Q6OiRtYWNyb3MiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkiOjg6e3M6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5AGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6ODk6IlxfX1R3aWdUZW1wbGF0ZV80YWIwOWJlZTcwNGU0Njc5ZmRkY2YxMzAzYTFiOTIxZmVlZmQ0MGZhMTlhYTYxMzJjNzEyMWIwZGEzZmY5OTdkOjokbWFjcm9zIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6NjoibWFjcm9zIjt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAZG9jQmxvY2siO047czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAdHlwZXMiO2E6MDp7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5AGRlZmF1bHQiO3M6MjoiW10iO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5AHN0YXRpYyI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5AHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjc6InByaXZhdGUiO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQBsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MTk7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAdHlwZSI7Tjt9fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBtZXRob2RzIjthOjExOntzOjk1OiJcX19Ud2lnVGVtcGxhdGVfNGFiMDliZWU3MDRlNDY3OWZkZGNmMTMwM2ExYjkyMWZlZWZkNDBmYTE5YWE2MTMyYzcxMjFiMGRhM2ZmOTk3ZDo6X19jb25zdHJ1Y3QoKSI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QiOjk6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABkb2NCbG9jayI7TjtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo5NToiXF9fVHdpZ1RlbXBsYXRlXzRhYjA5YmVlNzA0ZTQ2NzlmZGRjZjEzMDNhMWI5MjFmZWVmZDQwZmExOWFhNjEzMmM3MTIxYjBkYTNmZjk5N2Q6Ol9fY29uc3RydWN0KCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxMToiX19jb25zdHJ1Y3QiO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYWJzdHJhY3QiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAc3RhdGljIjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjY6InB1YmxpYyI7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhcmd1bWVudHMiO2E6MTp7aTowO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQiOjU6e3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6MzoiZW52IjtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudAB0eXBlIjtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcT2JqZWN0XyI6MTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xPYmplY3RfAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6MTc6IlxUd2lnXEVudmlyb25tZW50IjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTE6IkVudmlyb25tZW50Ijt9fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO047czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAYnlSZWZlcmVuY2UiO2I6MDtzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABpc1ZhcmlhZGljIjtiOjA7fX1zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjIxO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAByZXR1cm5UeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9fXM6OTU6IlxfX1R3aWdUZW1wbGF0ZV80YWIwOWJlZTcwNGU0Njc5ZmRkY2YxMzAzYTFiOTIxZmVlZmQ0MGZhMTlhYTYxMzJjNzEyMWIwZGEzZmY5OTdkOjpkb0dldFBhcmVudCgpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6OTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGRvY0Jsb2NrIjtOO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjk1OiJcX19Ud2lnVGVtcGxhdGVfNGFiMDliZWU3MDRlNDY3OWZkZGNmMTMwM2ExYjkyMWZlZWZkNDBmYTE5YWE2MTMyYzcxMjFiMGRhM2ZmOTk3ZDo6ZG9HZXRQYXJlbnQoKSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjExOiJkb0dldFBhcmVudCI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6OToicHJvdGVjdGVkIjt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YToxOntpOjA7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czo3OiJjb250ZXh0IjtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudAB0eXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQXJyYXlfIjozOntzOjEyOiIAKgB2YWx1ZVR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjEwOiIAKgBrZXlUeXBlIjtOO3M6MTc6IgAqAGRlZmF1bHRLZXlUeXBlIjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29tcG91bmQiOjI6e3M6NTI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQWdncmVnYXRlZFR5cGUAdHlwZXMiO2E6Mjp7aTowO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xTdHJpbmdfIjowOnt9aToxO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xJbnRlZ2VyIjowOnt9fXM6NTI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQWdncmVnYXRlZFR5cGUAdG9rZW4iO3M6MToifCI7fX1zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO319czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTozNTtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAcmV0dXJuVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fX1zOjkzOiJcX19Ud2lnVGVtcGxhdGVfNGFiMDliZWU3MDRlNDY3OWZkZGNmMTMwM2ExYjkyMWZlZWZkNDBmYTE5YWE2MTMyYzcxMjFiMGRhM2ZmOTk3ZDo6ZG9EaXNwbGF5KCkiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kIjo5OntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZG9jQmxvY2siO047czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6OTM6IlxfX1R3aWdUZW1wbGF0ZV80YWIwOWJlZTcwNGU0Njc5ZmRkY2YxMzAzYTFiOTIxZmVlZmQ0MGZhMTlhYTYxMzJjNzEyMWIwZGEzZmY5OTdkOjpkb0Rpc3BsYXkoKSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjk6ImRvRGlzcGxheSI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6OToicHJvdGVjdGVkIjt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YToyOntpOjA7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czo3OiJjb250ZXh0IjtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudAB0eXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQXJyYXlfIjozOntzOjEyOiIAKgB2YWx1ZVR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjEwOiIAKgBrZXlUeXBlIjtOO3M6MTc6IgAqAGRlZmF1bHRLZXlUeXBlIjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29tcG91bmQiOjI6e3M6NTI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQWdncmVnYXRlZFR5cGUAdHlwZXMiO2E6Mjp7aTowO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xTdHJpbmdfIjowOnt9aToxO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xJbnRlZ2VyIjowOnt9fXM6NTI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQWdncmVnYXRlZFR5cGUAdG9rZW4iO3M6MToifCI7fX1zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO31pOjE7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czo2OiJibG9ja3MiO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xBcnJheV8iOjM6e3M6MTI6IgAqAHZhbHVlVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6MTA6IgAqAGtleVR5cGUiO047czoxNzoiACoAZGVmYXVsdEtleVR5cGUiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb21wb3VuZCI6Mjp7czo1MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xBZ2dyZWdhdGVkVHlwZQB0eXBlcyI7YToyOntpOjA7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXFN0cmluZ18iOjA6e31pOjE7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEludGVnZXIiOjA6e319czo1MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xBZ2dyZWdhdGVkVHlwZQB0b2tlbiI7czoxOiJ8Ijt9fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO3M6MjoiW10iO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO319czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTo0MTtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAcmV0dXJuVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fX1zOjEwMDoiXF9fVHdpZ1RlbXBsYXRlXzRhYjA5YmVlNzA0ZTQ2NzlmZGRjZjEzMDNhMWI5MjFmZWVmZDQwZmExOWFhNjEzMmM3MTIxYjBkYTNmZjk5N2Q6OmJsb2NrX3BhZ2VfdGl0bGUoKSI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QiOjk6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABkb2NCbG9jayI7TjtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czoxMDA6IlxfX1R3aWdUZW1wbGF0ZV80YWIwOWJlZTcwNGU0Njc5ZmRkY2YxMzAzYTFiOTIxZmVlZmQ0MGZhMTlhYTYxMzJjNzEyMWIwZGEzZmY5OTdkOjpibG9ja19wYWdlX3RpdGxlKCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxNjoiYmxvY2tfcGFnZV90aXRsZSI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NjoicHVibGljIjt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YToyOntpOjA7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czo3OiJjb250ZXh0IjtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudAB0eXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAZGVmYXVsdCI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABieVJlZmVyZW5jZSI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGlzVmFyaWFkaWMiO2I6MDt9aToxO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQiOjU6e3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6NjoiYmxvY2tzIjtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudAB0eXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQXJyYXlfIjozOntzOjEyOiIAKgB2YWx1ZVR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjEwOiIAKgBrZXlUeXBlIjtOO3M6MTc6IgAqAGRlZmF1bHRLZXlUeXBlIjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29tcG91bmQiOjI6e3M6NTI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQWdncmVnYXRlZFR5cGUAdHlwZXMiO2E6Mjp7aTowO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xTdHJpbmdfIjowOnt9aToxO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xJbnRlZ2VyIjowOnt9fXM6NTI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQWdncmVnYXRlZFR5cGUAdG9rZW4iO3M6MToifCI7fX1zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtzOjI6IltdIjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABieVJlZmVyZW5jZSI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGlzVmFyaWFkaWMiO2I6MDt9fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6NjE7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e319czo5NzoiXF9fVHdpZ1RlbXBsYXRlXzRhYjA5YmVlNzA0ZTQ2NzlmZGRjZjEzMDNhMWI5MjFmZWVmZDQwZmExOWFhNjEzMmM3MTIxYjBkYTNmZjk5N2Q6OmJsb2NrX3Rvb2xiYXIoKSI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QiOjk6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABkb2NCbG9jayI7TjtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo5NzoiXF9fVHdpZ1RlbXBsYXRlXzRhYjA5YmVlNzA0ZTQ2NzlmZGRjZjEzMDNhMWI5MjFmZWVmZDQwZmExOWFhNjEzMmM3MTIxYjBkYTNmZjk5N2Q6OmJsb2NrX3Rvb2xiYXIoKSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjEzOiJibG9ja190b29sYmFyIjt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFic3RyYWN0IjtiOjA7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZpbmFsIjtiOjA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHN0YXRpYyI7YjowO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAB2aXNpYmlsaXR5IjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkiOjE6e3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkAdmlzaWJpbGl0eSI7czo2OiJwdWJsaWMiO31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYXJndW1lbnRzIjthOjI6e2k6MDtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50Ijo1OntzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABuYW1lIjtzOjc6ImNvbnRleHQiO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO31pOjE7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czo2OiJibG9ja3MiO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xBcnJheV8iOjM6e3M6MTI6IgAqAHZhbHVlVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6MTA6IgAqAGtleVR5cGUiO047czoxNzoiACoAZGVmYXVsdEtleVR5cGUiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb21wb3VuZCI6Mjp7czo1MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xBZ2dyZWdhdGVkVHlwZQB0eXBlcyI7YToyOntpOjA7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXFN0cmluZ18iOjA6e31pOjE7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEludGVnZXIiOjA6e319czo1MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xBZ2dyZWdhdGVkVHlwZQB0b2tlbiI7czoxOiJ8Ijt9fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO3M6MjoiW10iO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO319czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTo4MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAcmV0dXJuVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fX1zOjk0OiJcX19Ud2lnVGVtcGxhdGVfNGFiMDliZWU3MDRlNDY3OWZkZGNmMTMwM2ExYjkyMWZlZWZkNDBmYTE5YWE2MTMyYzcxMjFiMGRhM2ZmOTk3ZDo6YmxvY2tfbWVudSgpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6OTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGRvY0Jsb2NrIjtOO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjk0OiJcX19Ud2lnVGVtcGxhdGVfNGFiMDliZWU3MDRlNDY3OWZkZGNmMTMwM2ExYjkyMWZlZWZkNDBmYTE5YWE2MTMyYzcxMjFiMGRhM2ZmOTk3ZDo6YmxvY2tfbWVudSgpIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTA6ImJsb2NrX21lbnUiO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYWJzdHJhY3QiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAc3RhdGljIjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjY6InB1YmxpYyI7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhcmd1bWVudHMiO2E6Mjp7aTowO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQiOjU6e3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6NzoiY29udGV4dCI7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO047czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAYnlSZWZlcmVuY2UiO2I6MDtzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABpc1ZhcmlhZGljIjtiOjA7fWk6MTtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50Ijo1OntzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABuYW1lIjtzOjY6ImJsb2NrcyI7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEFycmF5XyI6Mzp7czoxMjoiACoAdmFsdWVUeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9czoxMDoiACoAa2V5VHlwZSI7TjtzOjE3OiIAKgBkZWZhdWx0S2V5VHlwZSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbXBvdW5kIjoyOntzOjUyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEFnZ3JlZ2F0ZWRUeXBlAHR5cGVzIjthOjI6e2k6MDtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcU3RyaW5nXyI6MDp7fWk6MTtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcSW50ZWdlciI6MDp7fX1zOjUyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEFnZ3JlZ2F0ZWRUeXBlAHRva2VuIjtzOjE6InwiO319czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAZGVmYXVsdCI7czoyOiJbXSI7czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAYnlSZWZlcmVuY2UiO2I6MDtzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABpc1ZhcmlhZGljIjtiOjA7fX1zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjI1NztzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAcmV0dXJuVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fX1zOjk1OiJcX19Ud2lnVGVtcGxhdGVfNGFiMDliZWU3MDRlNDY3OWZkZGNmMTMwM2ExYjkyMWZlZWZkNDBmYTE5YWE2MTMyYzcxMjFiMGRhM2ZmOTk3ZDo6YmxvY2tfcGFuZWwoKSI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QiOjk6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABkb2NCbG9jayI7TjtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo5NToiXF9fVHdpZ1RlbXBsYXRlXzRhYjA5YmVlNzA0ZTQ2NzlmZGRjZjEzMDNhMWI5MjFmZWVmZDQwZmExOWFhNjEzMmM3MTIxYjBkYTNmZjk5N2Q6OmJsb2NrX3BhbmVsKCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxMToiYmxvY2tfcGFuZWwiO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYWJzdHJhY3QiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAc3RhdGljIjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjY6InB1YmxpYyI7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhcmd1bWVudHMiO2E6Mjp7aTowO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQiOjU6e3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6NzoiY29udGV4dCI7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO047czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAYnlSZWZlcmVuY2UiO2I6MDtzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABpc1ZhcmlhZGljIjtiOjA7fWk6MTtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50Ijo1OntzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABuYW1lIjtzOjY6ImJsb2NrcyI7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEFycmF5XyI6Mzp7czoxMjoiACoAdmFsdWVUeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9czoxMDoiACoAa2V5VHlwZSI7TjtzOjE3OiIAKgBkZWZhdWx0S2V5VHlwZSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbXBvdW5kIjoyOntzOjUyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEFnZ3JlZ2F0ZWRUeXBlAHR5cGVzIjthOjI6e2k6MDtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcU3RyaW5nXyI6MDp7fWk6MTtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcSW50ZWdlciI6MDp7fX1zOjUyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEFnZ3JlZ2F0ZWRUeXBlAHRva2VuIjtzOjE6InwiO319czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAZGVmYXVsdCI7czoyOiJbXSI7czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAYnlSZWZlcmVuY2UiO2I6MDtzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABpc1ZhcmlhZGljIjtiOjA7fX1zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjI4NjtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAcmV0dXJuVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fX1zOjk5OiJcX19Ud2lnVGVtcGxhdGVfNGFiMDliZWU3MDRlNDY3OWZkZGNmMTMwM2ExYjkyMWZlZWZkNDBmYTE5YWE2MTMyYzcxMjFiMGRhM2ZmOTk3ZDo6Z2V0VGVtcGxhdGVOYW1lKCkiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kIjo5OntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZG9jQmxvY2siO047czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6OTk6IlxfX1R3aWdUZW1wbGF0ZV80YWIwOWJlZTcwNGU0Njc5ZmRkY2YxMzAzYTFiOTIxZmVlZmQ0MGZhMTlhYTYxMzJjNzEyMWIwZGEzZmY5OTdkOjpnZXRUZW1wbGF0ZU5hbWUoKSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjE1OiJnZXRUZW1wbGF0ZU5hbWUiO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYWJzdHJhY3QiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAc3RhdGljIjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjY6InB1YmxpYyI7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhcmd1bWVudHMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6ODIyO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAByZXR1cm5UeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9fXM6OTU6IlxfX1R3aWdUZW1wbGF0ZV80YWIwOWJlZTcwNGU0Njc5ZmRkY2YxMzAzYTFiOTIxZmVlZmQ0MGZhMTlhYTYxMzJjNzEyMWIwZGEzZmY5OTdkOjppc1RyYWl0YWJsZSgpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6OTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGRvY0Jsb2NrIjtOO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjk1OiJcX19Ud2lnVGVtcGxhdGVfNGFiMDliZWU3MDRlNDY3OWZkZGNmMTMwM2ExYjkyMWZlZWZkNDBmYTE5YWE2MTMyYzcxMjFiMGRhM2ZmOTk3ZDo6aXNUcmFpdGFibGUoKSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjExOiJpc1RyYWl0YWJsZSI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NjoicHVibGljIjt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YTowOnt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTo4Mjc7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e319czo5NjoiXF9fVHdpZ1RlbXBsYXRlXzRhYjA5YmVlNzA0ZTQ2NzlmZGRjZjEzMDNhMWI5MjFmZWVmZDQwZmExOWFhNjEzMmM3MTIxYjBkYTNmZjk5N2Q6OmdldERlYnVnSW5mbygpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6OTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGRvY0Jsb2NrIjtOO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjk2OiJcX19Ud2lnVGVtcGxhdGVfNGFiMDliZWU3MDRlNDY3OWZkZGNmMTMwM2ExYjkyMWZlZWZkNDBmYTE5YWE2MTMyYzcxMjFiMGRhM2ZmOTk3ZDo6Z2V0RGVidWdJbmZvKCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxMjoiZ2V0RGVidWdJbmZvIjt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFic3RyYWN0IjtiOjA7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZpbmFsIjtiOjA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHN0YXRpYyI7YjowO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAB2aXNpYmlsaXR5IjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkiOjE6e3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkAdmlzaWJpbGl0eSI7czo2OiJwdWJsaWMiO31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYXJndW1lbnRzIjthOjA6e31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjgzMjtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAcmV0dXJuVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fX1zOjEwMDoiXF9fVHdpZ1RlbXBsYXRlXzRhYjA5YmVlNzA0ZTQ2NzlmZGRjZjEzMDNhMWI5MjFmZWVmZDQwZmExOWFhNjEzMmM3MTIxYjBkYTNmZjk5N2Q6OmdldFNvdXJjZUNvbnRleHQoKSI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QiOjk6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABkb2NCbG9jayI7TjtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czoxMDA6IlxfX1R3aWdUZW1wbGF0ZV80YWIwOWJlZTcwNGU0Njc5ZmRkY2YxMzAzYTFiOTIxZmVlZmQ0MGZhMTlhYTYxMzJjNzEyMWIwZGEzZmY5OTdkOjpnZXRTb3VyY2VDb250ZXh0KCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxNjoiZ2V0U291cmNlQ29udGV4dCI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NjoicHVibGljIjt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YTowOnt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTo4Mzc7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e319fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwB1c2VkVHJhaXRzIjthOjA6e31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjE2O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fX19czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbnRlcmZhY2VzIjthOjA6e31zOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHRyYWl0cyI7YTowOnt9fQ==";